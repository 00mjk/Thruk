#!/usr/bin/perl

use strict;
use warnings;

BEGIN {
    use FindBin;
    use Config;
    if(-e $FindBin::Bin."/../local-lib") {
        ### use 5.10.0; # only required for packages ###
        unshift @INC, $FindBin::Bin."/../local-lib/lib/perl5";
        if(! -e $FindBin::Bin."/../local-lib/lib/perl5/".$Config{archname}) {
            die("\nERROR: this is the wrong precompiled version, your archname is: ".$Config{archname}."\n\n");
        }
        require local::lib; local::lib->import($FindBin::Bin."/../local-lib/perl5/");
    }
}

##############################################

=head1 NAME

thruk - Command Line Utility for Thruk Monitoring Gui

=head1 SYNOPSIS

thruk [ -h |--help ]
      [ -v | --verbose ]
      [ -a | --auth=<auth> ]
      [ -b | --backend=<backend> ]
      [ -l | --list-backends ]
      [ -u | --url=<url> ]

=head1 DESCRIPTION

This script gives access to various parts of the Thruk gui and allows to generate
excel reports, csv exports or any other url by using command line and bypassing the
webserver.

=head1 OPTIONS

script has the following arguments

=over 4

=item B<-h> , B<--help>

    print help and exit

=item B<-v> , B<--verbose>

    print verbose output too

=item B<-b> I<backend>, B<--backend>=I<backend>

    specify backend(s), otherwise the default backends will be used

=item B<-l> , B<--list-backends>

    get list of available backends

=item B<-a> I<authname>, B<--auth>=I<authname>

    use this username for authentication

=item B<-u> I<url>, B<--url>=I<url>

    request this url. Url can be shortened and the
    leading /thruk/cgi-bin/ can be stripped.

=back

=head1 RETURN VALUE

thruk returns 0 on success or 1 otherwise

=head1 EXAMPLES

export the event log as excel file:

  %> thruk -a thrukadmin -u 'showlog.cgi?view_mode=xls' > eventlog.xls

export all services into an excel file:

  %> thruk -a thrukadmin -u 'status.cgi?view_mode=xls&host=all' > allservices.xls

export all services into an excel file:

  %> thruk -a thrukadmin -u 'avail.cgi?host=all&timeperiod=last7days&csvoutput=1' > all_host_availability.csv

=head1 AUTHOR

2012, Sven Nierlein, <sven@nierlein.de>

=cut

##############################################

my $thruk = thruk_runner->new();
exit $thruk->_run();

##############################################
package thruk_runner;

use Carp;
use Getopt::Long;
use Pod::Usage;
use Data::Dumper;
use Catalyst::ScriptRunner;

##############################################
sub new {
    my $class = shift;
    my $self  = {};
    bless $self, $class;
    return $self;
}

##############################################
sub _run {
    my($self) = @_;

    $self->_get_options();

    if(defined $self->{'opt'}->{'listbackends'}) {
        return $self->_listbackends();
    }

    if(defined $self->{'opt'}->{'url'}) {
        if($self->{'opt'}->{'url'} =~ m|^\w+\.cgi|gmx) {
            $self->{'opt'}->{'url'} = '/thruk/cgi-bin/'.$self->{'opt'}->{'url'};
        }
        return $self->_request_url($self->{'opt'}->{'url'})
    }

    pod2usage( { -verbose => 2 } );
    return 0;
}

##############################################
sub _listbackends {
    my($self) = @_;
    my $c = $self->_dummy_c();
    printf("%-4s %-10s %s\n", 'Def', 'Key', 'Name');
    printf("-------------------------\n");
    for my $key (keys %{$c->stash->{'backend_detail'}}) {
        printf("%-4s %-10s %s\n",
                $c->stash->{'backend_detail'}->{$key}->{'disabled'} == 0 ? ' * ' : '',
                $key,
                $c->stash->{'backend_detail'}->{$key}->{'name'}
        );
    }
    printf("-------------------------\n");
    return 0;
}

##############################################
sub _request_url {
    my($self,$url) = @_;

    $ENV{'REQUEST_URI'}      = $url;
    $ENV{'SCRIPT_NAME'}      = $url;
    $ENV{'SCRIPT_NAME'}      =~ s/\?(.*)$//gmx;
    $ENV{'QUERY_STRING'}     = $1 if defined $1;
    $ENV{'REMOTE_USER'}      = $self->{'opt'}->{'auth'} if defined $self->{'opt'}->{'auth'};
    $ENV{'SERVER_PROTOCOL'}  = 'HTTP/1.0'  unless defined $ENV{'SERVER_PROTOCOL'};
    $ENV{'REQUEST_METHOD'}   = 'GET'       unless defined $ENV{'REQUEST_METHOD'};
    $ENV{'HTTP_HOST'}        = '127.0.0.1' unless defined $ENV{'HTTP_HOST'};
    $ENV{'REMOTE_ADDR'}      = '127.0.0.1' unless defined $ENV{'REMOTE_ADDR'};
    $ENV{'SERVER_PORT'}      = '80'        unless defined $ENV{'SERVER_PORT'};
    $ENV{'NO_EXTERNAL_JOBS'} = 1;

    Catalyst::ScriptRunner->run('Thruk', 'Thrukembedded');

    if($ENV{'HTTP_CODE'} != 200) {
        print "\n";
        return 1;
    }
    return 0;
}

##############################################
sub _get_options {
    my($self) = @_;

    $self->{'opt'} = {
        'verbose'  => 0,
        'backends' => [],
    };
    Getopt::Long::Configure('no_ignore_case');
    GetOptions (
       "h|help"             => \$self->{'opt'}->{'help'},
       "v|verbose"          => \$self->{'opt'}->{'verbose'},
       "l|list-backends"    => \$self->{'opt'}->{'listbackends'},
       "b|backend=s"        => \$self->{'opt'}->{'backends'},
       "u|url=s"            => \$self->{'opt'}->{'url'},
       "a|auth=s"           => \$self->{'opt'}->{'auth'},
    ) or pod2usage( { -verbose => 2, -message => 'error in options' } );
    return;
}

##############################################
sub _dummy_c {
    my($self) = @_;
    require Catalyst::Test;
    Catalyst::Test->import('Thruk');
    my($res, $c) = ctx_request('/thruk/dummy');
    return $c;
}

1;
