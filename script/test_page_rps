#!/usr/bin/env perl

use warnings;
use strict;
use Time::HiRes qw/sleep gettimeofday tv_interval/;

#################################################
# settings
my $NUM         = 10;
my $REQUESTS    = $ENV{REQUESTS}    || 100;
my $CONCURRENCY = $ENV{CONCURRENCY} || 5;
my $DELAY       = $ENV{DELAY}       || 2;
my $BASEPORT    = 3000;
my $BASEURL     = "http://127.0.0.1:$BASEPORT/thruk";

#################################################
# prepare
cleanup();
my $author = -f '.author' ? 1 : 0;
unlink('.author');

#################################################
# run tests
print("+---------------+---------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------------+-------+\n");
print("| Branch        | Startup | Static HTML     | Tactical CGI    | Status CGI      | JSON CGI        | Business P. CGI | Memory                | Load  |\n");
print("+---------------+---------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------------+-------+\n");
chomp(my $branch = `git branch --no-color 2>/dev/null | grep ^\*`);
$branch =~ s|^\*\s+||mx;
my $tags = [];
if(scalar @ARGV == 0) {
    $tags = [reverse split(/\n/, `git tag -l | awk -F- '{ print \$1 }' | sort -u | tail -$NUM`)];
    if($branch ne 'master') { unshift @{$tags}, 'master' }
    unshift @{$tags}, $branch;
} else {
    $tags = \@ARGV;
}

#################################################
END {
    cleanup();
    switch_tag($branch);
    `touch .author` if $author;
    print "\n";
}
$SIG{'INT'}  = sub {
    cleanup();
    switch_tag($branch);
    `touch .author` if $author;
    exit;
};

#################################################
# run tests
for my $tag (@{$tags}) {
    $tag =~ s|^\*\s+||gmx;
    if($tag =~ /^v/mx) {
        # get latest sp for this tag
        chomp($tag = `git tag -l 2>/dev/null | grep $tag | tail -n 1`);
    }
    test_tag($tag);
}
print "+---------------+---------+-----------------+-----------------+-----------------+-----------------+-----------------+-----------------------+-------+\n";
cleanup();
exit;


#################################################
# SUBS
#################################################
sub cleanup {
  `ps -efl | grep thruk_server | grep -v grep | awk '{ print \$4 }' | xargs -r kill >/dev/null 2>&1`;
}

#################################################
sub test_page {
    my($name, $url) = @_;
    our $currenttag;
    sleep $DELAY;
    my $cmd      = "ab -l -c $CONCURRENCY -n $REQUESTS $url 2>&1";
    my $pageres  = `$cmd`;
    my($page)    = $pageres =~ m/\QRequests per second:\E\s+([\d\.]+)/mx;
    my($pageerr) = $pageres =~ m/\QNon-2xx responses:\E|\QFailed requests:\E\s+([\d\.]+)/mx;
    if($pageerr && $pageerr >= 5) {
        printf "errored           | ";
        if($currenttag !~ m/^v/mx) {
            printf(STDERR "\n**********\n%s\n\ncmd: %s\n**********\n", $pageres, $cmd);
            exit;
        }
    } else {
        printf("%6s #/sec    | ", $page);
    }
}

#################################################
sub switch_tag {
    my($tag) = @_;
    die("no tag") unless $tag;
    my $git = `git checkout -q $tag 2>&1`;
    if($git =~ /error:/) {
        printf("\n| %s", $git);
        exit;
    }
    `git log -1 2>&1`; # result in wrong startup times otherwise
    `git describe --tag --exact-match 2>&1`; # result in wrong startup times otherwise
    `git branch --no-color 2>&1`; # result in wrong startup times otherwise
    `rm -rf tmp/ttc_*`;
}

#################################################
sub test_tag {
    my($tag) = @_;
    our $currenttag = $tag;
    printf("| %-13s | ", $tag);
    switch_tag($tag);
    chomp(my $pid = `./script/thruk_server.pl >/dev/null 2>&1 & echo \$!`);

    my $t0 = [gettimeofday];
    while(`lsof -i:$BASEPORT | grep -c LISTEN` != 1) {
        sleep(0.05);
        -d '/proc/'.$pid || die("failed to start!\n");
    }
    my $elapsed = tv_interval ( $t0 );
    printf("% 5.2fs  | ", $elapsed);

    # warm up
    `ab -c $CONCURRENCY -n 10 "$BASEURL/cgi-bin/tac.cgi" > /dev/null 2>&1`;

    test_page('main',   "$BASEURL/changes.html");
    test_page('tac',    "$BASEURL/cgi-bin/tac.cgi");
    test_page('status', "$BASEURL/cgi-bin/status.cgi");
    chomp(my $mem  = `cat /proc/$pid/status | grep VmRSS:  | awk '{print \$2}'`);
    test_page('json',   "$BASEURL/cgi-bin/status.cgi?style=hostdetail&hostgroup=all&view_mode=json");
    test_page('bp',     "$BASEURL/cgi-bin/bp.cgi");
    chomp(my $max  = `cat /proc/$pid/status | grep VmPeak: | awk '{print \$2}'`);
    chomp(my $load = `cat /proc/loadavg | awk '{ print \$1 }'`);

    kill('TERM', $pid);
    printf(" %3d MB (max. %4dMB) | %5s |\n", $mem/1000, $max/1000, $load);
}
