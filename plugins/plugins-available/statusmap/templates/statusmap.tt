[% statusmap_header = BLOCK %]
  <link type="text/css" href="/thruk/plugins/statusmap/Treemap.css" rel="stylesheet" />
<!--  <script language="javascript" type="text/javascript" src="/thruk/plugins/statusmap/jit-yc.js"></script> -->
  <script language="javascript" type="text/javascript" src="/thruk/plugins/statusmap/jit.js"></script>
  <script language="javascript" type="text/javascript" src="/thruk/plugins/statusmap/statusmap.js"></script>
[% END %]
[% PROCESS _header.tt extra_header => statusmap_header %]

<form method="get" action="statusmap.cgi">
<table border="0" width="100%" cellspacing="0" cellpadding="0" id="top_pane"[% IF hidetop == 1 %]style="visibility:hidden; display:none;"[% END %]>
  <tr>
    <td align="left" valign="top" width="33%">
      [% PROCESS _infobox.tt %]
    </td>
    <td align="center" valign="top" width="33%">
      <div align="center" class='dataTitle'>Statusmap For All Hosts</div><br>
    </td>
    <td align="right" valign="top" width="33%">
      <table border="0" cellspacing=2 cellpadding=2 class='optBox'>
        <tr>
          <td align="left" class='optBoxItem'>Map Layout:</td>
          <td align="left" class='optBoxItem'>Group By:</td>
        </tr>
        <tr>
          <td align="left" class='optBoxItem'>
            <select name='type'>
              <option value="1"[% IF type == 1 %] selected[% END %]>Table Layout</option>
              <option value="2"[% IF type == 2 %] selected[% END %]>Circular Layout</option>
            </select>
          </td>
          <td align="left" class='optBoxItem'>
            <select name='groupby'>
              <option value="1"[% IF groupby == 1 %] selected[% END %]>Parent</option>
              <option value="2"[% IF groupby == 2 %] selected[% END %]>IP Address</option>
            </select>
          </td>
        </tr>
        <tr>
          <td align="left" colspan="2" class='optBoxItem'>Detail Level:</td>
        </tr>
        <tr>
          <td align="left" colspan="2" class='optBoxItem'>
            <select name='level'>
              <option value="1"[% IF level == 1 %] selected[% END %]>1</option>
              <option value="2"[% IF level == 2 %] selected[% END %]>2</option>
              <option value="3"[% IF level == 3 %] selected[% END %]>3</option>
              <option value="4"[% IF level == 4 %] selected[% END %]>4</option>
              <option value="5"[% IF level == 5 %] selected[% END %]>5</option>
              <option value="6"[% IF level == 6 %] selected[% END %]>6</option>
            </select>
          </td>
        </tr>
        <tr>
          <td align="left" valign="bottom" class='optBoxItem'>
          </td>
          <td align="right" class='optBoxItem'>
            <input type='hidden' name='hidetop' id='hidetop' value='[% hidetop %]'>
            <input type='submit' value='Update'>
          </td>
        </tr>
      </table>
      [% IF show_context_help %]
      <br><a href='/thruk/docs/statusmap' target='cxhlp' onclick='javascript:window.open(this.href,"cxhlp","width=550,height=600,toolbar=0,location=0,status=0,resizable=1,scrollbars=1");return true'><img src='/thruk/themes/[% theme %]/images/contexthelp1.gif' width="30" height="29" border="0" alt='Display context-sensitive help for this screen' title='Display context-sensitive help for this screen'></a>
      [% END %]
    </td>
  </tr>
</table>
</form>
<br>
[% IF type == '1' %]
<div class="hint">left mouseclick = zoom in, right mouse click = zoom out</div>
[% END %]
<div id="infovis"></div>
<div id="tooltip" class="tip" style="position: absolute; z-index: 13000; display: none;"></div>

<script type="text/javascript">
<!--

TreeUtil.prune = function(tree, maxLevel) {
    this.each(tree, function(elem, i) {
        if(i == maxLevel && elem.children) {
            delete elem.children;
            elem.children = [];
        }
    });
};

var json = '[% json %]';

function init(){
    //init data
    var infovis = document.getElementById('infovis');
    var w = infovis.offsetWidth - 20, h = infovis.offsetHeight - infovis.offsetTop - 20;
    infovis.style.width = w + 'px';
    infovis.style.height = h + 'px';

[%# Table Layout #%]
[% IF type == '1' %]
    //init treemap
    var id_to_show = '[% host %]';
    show_tree_map(id_to_show);
[% END %]


[%# Circular Layout #%]
[% IF type == '2' %]

  // distance between circles
  var levelDistance = 100;

  //Create a new canvas instance.
  var canvas = new Canvas('mycanvas', {
      //Where to append the canvas widget
      'injectInto': 'infovis',
      'width': w,
      'height': h,

      //Optional: create a background canvas and plot
      //concentric circles in it.
      'backgroundCanvas': {
          'styles': {
              'strokeStyle': '#CCCCCC'
          },

          'impl': {
              'init': function(){},
              'plot': function(canvas, ctx){
                  var times = 6, d = levelDistance;
                  var pi2 = Math.PI * 2;
                  for (var i = 1; i <= times; i++) {
                      ctx.beginPath();
                      ctx.arc(0, 0, i * d, 0, pi2, true);
                      ctx.stroke();
                      ctx.closePath();
                  }
              }
          }
      }
  });

  var rgraph = new RGraph(canvas, {
      levelDistance: levelDistance,
      duration: 700,
      fps: 40,

      Node: { //Set Node and Edge colors.
          overridable: true,
      },
      Edge: {
          color: '#333333'
      },

      //Add the name of the node in the correponding label
      //and a click handler to move the graph.
      //This method is called once, on label creation.
      onCreateLabel: function(domElement, node){
          domElement.innerHTML = node.name;
          domElement.onclick = function(){
              rgraph.onClick(node.id);
          };
      },
      //Change some label dom properties.
      //This method is called each time a label is plotted.
      onPlaceLabel: function(domElement, node){
          var style = domElement.style;
          //style.visibility = 'visible';
          style.cursor = 'pointer';
          style.height = '';
          style.width  = '';

          if(node._depth <= 1) {
              style.fontSize = '0.9em';
              style.color    = '#000000';
          }
          else if(node._depth <= 3){
              style.fontSize = '0.8em';
              style.color    = '#494949';
          }else {
              style.fontSize = '0px';
              style.height   = '10px';
              style.width    = '10px';
              //style.visibility = 'hidden';
          }

          domElement.onmouseover = function (e){showTip((e||window.event), node)};

          var left = parseInt(style.left);
          var w = domElement.offsetWidth;
          style.left = (left - w / 2) + 'px';
      },
  });

  //load JSON data
  rgraph.loadJSON(json);
  //compute positions and make the first plot
  rgraph.refresh();

[% END %]

}

// show graph
init();
-->
</script>

[% PROCESS _footer.tt %]
