Ext.define('TP.Panlet', {
    extend: 'Ext.window.Window',

    x:         0,
    y:         25,
    height:    200,
    width:     400,
    layout:    'fit',
    constrain: true,
    hideMode:  'visibility',
    autoShow:  true,
    stateful:  true,
    resizable: new Ext.Panel({   // make resize snap to grid
        widthIncrement:  TP.snap_x,
        heightIncrement: TP.snap_y
    }),
    initComponent: function() {
        this.gearHandler = function() {
            if(this.gearitem.isHidden()) {
                if(this.loader != undefined) { this.loader.loadMask = false }
                this.gearitem.down('form').getForm().reset();
                this.gearitem.show();
            } else {
                if(this.loader != undefined) { this.loader.loadMask = true }
                this.gearitem.hide();
            }
        };
        this.tools = [{
                type: 'refresh',
                handler: function() { this.refreshHandler(); },
                scope: this
            }, {
                type: 'gear',
                handler: function() { this.gearHandler(); },
                scope: this
            }
        ];
        this.shadow_id = this.id + '_shadow';
        this.win_shadow = new Ext.create('Ext.Layer', {
            shadow: 'drop',
            id:     this.shadow_id,
            cls:    'window_drop_shadow'
        });
        this.callParent();
        this.gearitem = this.items.getAt(0);
    },
    items: [{
        /* Panlet Settings Panel */
        xtype : 'panel',
        layout: 'fit',
        hidden: true,
        scope:  this,
        border: 0,
        items: [
            Ext.create('Ext.form.Panel', {
                bodyPadding: 5,
                defaults: {
                    anchor: '95%'
                },
                items: [{
                    fieldLabel: 'Title',
                    xtype:      'textfield',
                    name:       'title'
                }, {
                    layout: 'table',
                    layoutConfig: {
                        columns: 2
                    },
                    border: 0,
                    items: [{
                        fieldLabel: 'Refresh Rate',
                        value:      60,  /* will be changed by afterrender */
                        name:       'refresh',
                        xtype:      'sliderfield',
                        minValue:   1,
                        maxValue:   300,
                        width:      200,
                        tipText: function(thumb){
                            return String(thumb.value) + 's';
                        },
                        listeners: {
                            change: function(s) {
                                var form = s.up('form').getForm();
                                form.setValues({refresh_txt: s.getValue()+'s'});
                            }
                        }
                    }, {
                        xtype:     'textfield',
                        margin:    '0 0 0 10',
                        name:      'refresh_txt',
                        readOnly:  true,
                        size:      3,
                        maxLength: 4
                    }]
                }]
            })
        ],
        buttonAlign: 'center',
        fbar: [{ xtype : 'button', text: 'cancel', handler: function() { this.up('window').gearitem.hide() } },
               { xtype : 'button',
                 text:   'save',
                 handler: function() {
                    var win      = this.up('window');
                    var form     = win.gearitem.down('form').getForm();
                    if(form.isValid()) {
                        win.gearitem.hide();
                        var fields = form.getFields();
                        var values = form.getFieldValues();
                        /* set new default value */
                        fields.each(function(f) {
                            var v = values[f.getName()];
                            f.originalValue = [ v ];
                        });
                        /* save values to xdata store */
                        for(var key in values) {
                            if(key == 'title') {
                                win.setTitle(values[key]);
                            } else {
                                win.xdata[key] = values[key];
                            }
                        };
                        win.startInterval();
                        win.saveState();
                    }
                 }
               },
        ]
    }],
    html:       '',
    onEsc:      function() { return false; },
    xdata:      { cls: 'TP.Panlet', refresh: 60 },
    startInterval: function() {
        window.clearInterval(this.interval);
        this.interval = window.setInterval(Ext.bind(this.refreshHandler, this, []), this.xdata.refresh * 1000);
    },
    dd_overriden: false,
    getState: function() {
        var state = this.callParent(arguments);
        state.title = this.title;
        state.xdata = this.xdata;
        return state;
    },
    applyState: function(state) {
        this.callParent(arguments);
        if(state) {
            this.xdata = state.xdata;
            this.setTitle(state.title);
        }
    },
    listeners:  {
        /* make shadow snap to grid */
        move: function( This, x, y, eOpts ) {
            var newpos = TP.get_snap(x, y);
            if(newpos[0] != x || newpos[1] != y) {
                This.setPosition( newpos[0], newpos[1], false );
            }
            var shadow = Ext.get(This.id + '_shadow');
            if(shadow != undefined) { shadow.hide(); }
        },
        destroy: function( This, eOpts ) {
            /* remove window from panels window ids */
            var panel = Ext.getCmp(this.panel_id);
            var list  = panel.window_ids;
            var newlist = [];
            for(var nr in list) {
                if(list[nr] != this.id) {
                    newlist.push(list[nr]);
                }
            }
            panel.window_ids = newlist;
            panel.saveState();
            /* clear state information */
            cp.clear(this.id);
        },
        show: function(This, eOpts) {
            // make move show snap shadow
            if(This.dd_overriden == false) {
                This.dd.onDrag = function(e){
                    // original onDrag function
                    var me = this,
                    comp   = (me.proxy && !me.comp.liveDrag) ? me.proxy : me.comp,
                    offset = me.getOffset(me.constrain || me.constrainDelegate ? 'dragTarget' : null);
                    x = me.startPosition[0] + offset[0];
                    y = me.startPosition[1] + offset[1];
                    comp.setPagePosition(x, y);
                    // show shadow
                    var newpos = TP.get_snap(x, y);
                    This.win_shadow.moveTo(newpos[0], newpos[1]);
                    This.win_shadow.setSize(This.getSize());
                    This.win_shadow.show();
                };
                This.dd_overriden = true;
            }
        },
        render: function(This, eOpts) {
            /* make title editable */
            var head = Ext.get(This.id + '_header_hd');
            head.on("dblclick", function() {
                Ext.Msg.prompt('Change Title', '', function(btn, text) {
                    if(btn == 'ok') {
                        This.setTitle(text);
                        This.setFormDefaults();
                        This.saveState();
                    }
                }, undefined, undefined, This.title);
            });
        },
        afterrender: function(This, eOpts) {
            /* set initial form values */
            this.setFormDefaults();

            /* start refresh interval */
            this.startInterval();
        }
    },
    setFormDefaults: function() {
        /* set initial form values */
        var me     = this;
        var form   = this.gearitem.down('form').getForm();
        var fields = form.getFields();
        this.xdata['refresh_txt'] = this.xdata['refresh']+'s';
        this.xdata['title']       = this.title;
        fields.each(function(f) {
            var v = me.xdata[f.getName()];
            f.originalValue = [ v ];
            f.setValue(v);
            f.value = v;
        });
        delete this.xdata['refresh_txt'];
        delete this.xdata['title'];
    }
});
