Ext.define('TP.Panlet', {
    extend: 'Ext.window.Window',

    title:     'title',   /* TODO: implement */
    x:         0,
    y:         25,
    height:    200,
    width:     400,
    layout:    'fit',
    constrain: true,
    hideMode:  'visibility',
    stateful:  true,
    resizable: new Ext.Panel({   // make resize snap to grid
        widthIncrement:  TP.snap_x,
        heightIncrement: TP.snap_y
    }),
    autoShow:   true,
    initComponent: function() {
        this.refreshHandler = function() {
            this.body.update("refreshed...");
        };
        this.tools = [{
                type: 'refresh',
                handler: function() { this.refreshHandler(); },
                scope: this
            }, {
                type: 'gear',       /* TODO: implement */
                handler: function() {
                    this.body.update("gears...");
                },
                scope: this
            }
        ];
        this.callParent();
    },
    html:       'content',
    onEsc:      function() { return false; },
    xdata:      { cls: 'TP.Panlet', refresh: 60 },
    getState: function() {
        var state = this.callParent(arguments);
        state.title = this.title;
        state.xdata = this.xdata;
        return state;
    },
    applyState: function(state) {
        this.callParent(arguments);
        if(state) {
            this.xdata = state.xdata;
            this.setTitle(state.title);
        }
    },
    listeners:  {
        /* make shadow snap to grid */
        move: function( This, x, y, eOpts ) {
            var newpos = TP.get_snap(x, y);
            if(newpos[0] != x || newpos[1] != y) {
                This.setPosition( newpos[0], newpos[1], false );
            }
            var shadow = Ext.get(This.id + '_shadow');
            if(shadow != undefined) { shadow.hide(); }
        },
        destroy: function( This, eOpts ) {
            /* remove window from panels window ids */
            var panel = Ext.getCmp(this.panel_id);
            var list  = panel.window_ids;
            var newlist = [];
            for(var nr in list) {
                if(list[nr] != this.id) {
                    newlist.push(list[nr]);
                }
            }
            panel.window_ids = newlist;
            panel.saveState();
            /* clear state information */
            cp.clear(this.id);
        },
        show: function(This, eOpts) {
            var win_shadow = Ext.create('Ext.Layer', {
                shadow: 'drop',
                id:     This.id + '_shadow',
                cls:    'window_drop_shadow'
            });
            // make move show snap shadow
            This.dd.onDrag = function(e){
                // original onDrag function
                var me = this,
                comp   = (me.proxy && !me.comp.liveDrag) ? me.proxy : me.comp,
                offset = me.getOffset(me.constrain || me.constrainDelegate ? 'dragTarget' : null);
                x = me.startPosition[0] + offset[0];
                y = me.startPosition[1] + offset[1];
                comp.setPagePosition(x, y);
                // show shadow
                var newpos = TP.get_snap(x, y);
                win_shadow.moveTo(newpos[0], newpos[1]);
                win_shadow.setSize(This.getSize());
                win_shadow.show();
            }
        },
        render: function(This, eOpts) {
            /* make title editable */
            var head = Ext.get(This.id + '_header_hd');
            head.on("dblclick", function() {
                Ext.Msg.prompt('Change Title', '', function(btn, text) {
                    if(btn == 'ok') {
                        This.setTitle(text);
                        This.saveState();
                    }
                }, undefined, undefined, This.title);
            });
        }
    }
});
