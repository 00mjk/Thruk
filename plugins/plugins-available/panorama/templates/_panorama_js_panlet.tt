Ext.define('TP.Panlet', {
    extend: 'Ext.window.Window',

    x:         0,
    y:         25,
    height:    200,
    width:     400,
    layout:    'fit',
    constrain: false,
    hideMode:  'visibility',
    autoShow:  false,
    stateful:  true,
    [% IF readonly %]
    resizable: false,
    closable: false,
    draggable: false,
    [% ELSE %]
    resizable: new Ext.Panel({   // make resize snap to grid
        widthIncrement:  TP.snap_x,
        heightIncrement: TP.snap_y
    }),
    [% END %]
    initComponent: function() {
        if(this.xdata == undefined) {
            this.xdata = {};
        } else {
            this.xdata = TP.clone(this.xdata);
        }
        this.xdata.refresh  = -1;
        this.xdata.cls      = this.$className;
        this.xdata.backends = [];

        this.gearHandler = function() {
            [% IF readonly %]return;[% END %]
            if(this.gearitem.isHidden()) {
                this.stateful = false;
                this.items.getAt(0).hide();
                this.gearitem.down('form').getForm().reset();
                if(this.has_search_button != undefined) {
                    // make filter show the same value as the main filter button
                    var form = this.gearitem.down('form').getForm();
                    form.setValues({filter: this.xdata.filter});
                }
                if(this.gearInitCallback) {
                    this.gearInitCallback(this);
                }
                this.origSize = this.getSize();
                if(this.origSize.width < 450 || this.origSize.height < 250) {
                    this.setSize(450, 250);
                }
                this.header.show();
                this.gearitem.show();
                this.addCls('gearopen');
            } else {
                this.stateful = true;
                if(this.origSize != undefined) {
                    this.setSize(this.origSize);
                    delete this.origSize;
                }
                this.applyBorderAndBackground();
                this.items.getAt(0).show();
                this.gearitem.hide();
                this.removeCls('gearopen');
            }
        };
        [% IF readonly %]
        this.tools = [];
        [% ELSE %]
        this.tools = [];
        if(this.has_search_button != undefined) {
            var This = this;
            this.tools.push({
                type: 'search',
                scope: this,
                tooltip: 'change search filter',
                handler: function() { TP.filterWindow(this.has_search_button, {setValue: function(v) { This.xdata.filter = v; This.refreshHandler() }, getValue: function() { return This.xdata.filter }}); }
            });
        }
        [% END %]
        this.tools.push(new Ext.panel.Tool({
            type:    'refresh',
            scope:    this,
            tooltip: 'reload content of this panlet',
            handler:  function() { this.manualRefresh() }
        }));
        [% UNLESS readonly %]
        this.tools.push({
            type: 'gear',
            scope: this,
            tooltip: 'settings',
            handler: function() { this.gearHandler() }
        });
        [% END %]
        this.shadow_id = this.id + '_shadow';
        this.win_shadow = new Ext.create('Ext.Layer', {
            shadow: 'drop',
            id:      this.shadow_id,
            cls:    'window_drop_shadow'
        });
        this.applyBorderAndBackground();
        this.callParent();
        this.gearitem = this.items.getAt(0);
    },
    items: [{
        /* Panlet Settings Panel */
        xtype : 'panel',
        layout: 'fit',
        autoShow: false,
        hidden: true,
        border: 0,
        items: [{
                xtype:           'form',
                bodyPadding:     2,
                border:          0,
                bodyStyle:       'overflow-y: auto;',
                submitEmptyText: false,
                defaults: {
                    anchor: '-12'
                },
                items: [{
                    fieldLabel: 'Title',
                    xtype:      'textfield',
                    name:       'title'
                }, {
                    xtype:      'tp_slider',
                    fieldLabel: 'Refresh Rate',
                    formConf: {
                        value:      60,
                        nameS:      'refresh',
                        nameL:      'refresh_txt'
                    }
                }, {
                    fieldLabel: 'Backends / Sites',
                    xtype:      'combobox',
                    emptyText : 'global settings',
                    name:       'backends',
                    multiSelect: true,
                    queryMode:  'local',
                    valueField: 'key',
                    displayField: 'text',
                    editable:   false,
                    triggerAction: 'all',
                    store:      TP.getBackendsArray(initial_backends),
                    listConfig : {
                        getInnerTpl: function(displayField) {
                            return '<div class="x-combo-list-item"><img src="' + Ext.BLANK_IMAGE_URL + '" class="chkCombo-default-icon chkCombo" /> {'+displayField+'} <\/div>';
                        }
                    }
                }]
        }],
        buttonAlign: 'center',
        fbar: [/* panlet setting cancel button */
               { xtype:  'button',
                 text:   'cancel',
                 handler: function() { this.up('window').gearHandler() }
               },
               /* panlet setting save button */
               { xtype : 'button',
                 text:   'save',
                 handler: function() {
                    var win      = this.up('window');
                    win.stateful = true;
                    var form     = win.gearitem.down('form').getForm();
                    if(form.isValid()) {
                        if(win.origSize != undefined) {
                            win.setSize(win.origSize);
                            delete win.origSize;
                        }
                        win.removeCls('gearopen');
                        win.gearitem.hide();
                        win.xdata = TP.storeFormToData(form, win.xdata);
                        win.applyBorderAndBackground();
                        win.setTitle(win.xdata.title);
                        win.setFormDefaults();
                        win.startTimeouts();
                        win.saveState();
                        win.manualRefresh();
                    }
                 }
               }
        ]
    }],
    html:       '',
    onEsc:      function() { return false; },
    startTimeouts: function() {
        if(!TP.initialized) { return; }
        this.stopTimeouts();
        var refresh = this.xdata.refresh;
        if(this.xdata.refresh == -1) {
            var tab = Ext.getCmp(this.panel_id);
            refresh = tab.xdata.refresh;
        }
        if(refresh > 0) {
            TP.timeouts['interval_'+this.id+'_refresh'] = window.setInterval(Ext.bind(this.refreshHandler, this, []), refresh * 1000);
        }
    },
    stopTimeouts: function() {
        window.clearInterval(TP.timeouts['interval_'+this.id+'_refresh']);
    },
    dd_overriden: false,
    getState: function() {
        var state = this.callParent(arguments);
        state.title = this.title;
        state.xdata = this.xdata;
        return state;
    },
    applyState: function(state) {
        this.callParent(arguments);
        if(state) {
            Ext.apply(this, state);
            this.setTitle(state.title);
        }
    },
    listeners:  {
        /* make shadow snap to grid */
        move: function( This, x, y, eOpts ) {
            var newpos = TP.get_snap(x, y);
            if(newpos[0] != x || newpos[1] != y) {
                if(this.snap != false) {
                    This.setPosition( newpos[0], newpos[1], false );
                }
            }
            var shadow = Ext.get(This.id + '_shadow');
            if(shadow != undefined) { shadow.hide(); }
        },
        destroy: function( This, eOpts ) {
            /* remove shadow */
            This.win_shadow.destroy();

            /* remove window from panels window ids */
            TP.removeWindowFromPanels(this.id);

            /* stop refreshing */
            this.stopTimeouts();
            /* clear state information */
            cp.clear(this.id);
        },
        show: function(This, eOpts) {
            // make move show snap shadow
            if(This.dd_overriden == false && This.dd != undefined) {
                This.dd.onDrag = function(e){
                    // original onDrag function
                    var me = this,
                    comp   = (me.proxy && !me.comp.liveDrag) ? me.proxy : me.comp,
                    offset = me.getOffset(me.constrain || me.constrainDelegate ? 'dragTarget' : null);
                    var x = me.startPosition[0] + offset[0];
                    var y = me.startPosition[1] + offset[1];
                    comp.setPagePosition(x, y);
                    // show shadow
                    var newpos;
                    if(This.snap == false) {
                        newpos = [x,y];
                    } else {
                        newpos = TP.get_snap(x, y);
                    }
                    This.win_shadow.moveTo(newpos[0], newpos[1]);
                    This.win_shadow.setSize(This.getSize());
                    This.win_shadow.show();
                    This.win_shadow.setZIndex(100000);
                };
                This.dd_overriden = true;
            }
            /* make sure we don't overlap dashboard settings window */
            if(TP.dashboardsSettingWindow) {
                TP.dashboardsSettingWindow.toFront();
            }
        },
        render: function(This, eOpts) {
            /* make title editable */
            [% UNLESS readonly %]
            var head = Ext.get(This.id + '_header_hd');
            head.on("dblclick", function() {
                Ext.Msg.prompt('Change Title', '', function(btn, text) {
                    if(btn == 'ok') {
                        This.setTitle(text);
                        This.setFormDefaults();
                        This.saveState();
                    }
                }, undefined, undefined, This.title);
            });
            [%+ END +%]
            /* make header show on mouseover only */
            var div    = This.getEl();
            var global = Ext.getCmp(This.panel_id);
            div.on("mouseout", function()  { This.hideHeader(global); });
            div.on("mouseover", function() { This.showHeader(global); });
        },
        afterrender: function(This, eOpts) {
            /* set initial form values */
            this.setFormDefaults();

            /* start refresh interval */
            this.startTimeouts();
        },
        afterlayout: function(This) {
            /* make all border and background work */
            this.applyBorderAndBackground();
        }
    },
    setFormDefaults: function() {
        /* set initial form values */
        this.xdata['title'] = this.title;
        TP.applyFormValues(this.gearitem.down('form').getForm(), this.xdata);
        delete this.xdata['title'];
        if(this.formUpdatedCallback) {
            this.formUpdatedCallback(this);
        }
    },
    manualRefresh: function() {
        if(this.loader != undefined) { this.loader.loadMask=true; }
        this.refreshHandler();
        if(this.loader != undefined) { this.loader.loadMask=false; }
    },
    refreshHandler: function() {
        TP.defaultSiteRefreshHandler(this);
    },
    getTool: function(name) {
        for(var nr=0; nr<this.tools.length; nr++) {
            if(this.tools[nr].type == name) {
                return(this.tools[nr]);
            }
        }
        return null;
    },
    showHeader: function(global) {
        if((global.xdata.autohideheader || this.alwaysBorderless)) {
            var style = this.header.getEl().dom.style;
            if(style.width == '' || style.width != this.getEl().dom.style.width) {
                // not yet rendered
                var refresh = this.xdata.refresh;
                this.xdata.refresh = -2;
                this.header.show();
                this.header.hide();
                this.xdata.refresh = refresh;
            }
            style.display  = 'inherit';
            style.opacity  = 0.9;
            style.zIndex   = 20;
            if(this.xdata.showborder == false) {
                this.getEl().enableShadow(true);
            }
        }
    },
    hideHeader: function(global) {
        if((this.alwaysBorderless || global.xdata.autohideheader) && this.xdata.showborder != true && this.gearitem.isHidden()) {
            var style = this.header.getEl().dom.style;
            style.display  = 'none';
            style.opacity  = '';
            style.zIndex   = '';
            if(this.xdata.showborder == false) {
                this.getEl().disableShadow();
            }
        }
    },
    applyBorderAndBackground: function() {
        this.overCls = 'autohideheaderover';
        if(this.alwaysBorderless || this.xdata.showborder == false) {
            this.cls     = 'autohideheader';
            this.bodyCls = 'autohideheader';
            this.shadow  = false;
            if(this.rendered) {
                this.addCls('autohideheader');
                this.body.addCls('autohideheader');
                this.getEl().disableShadow();
                this.getEl().setStyle('background-color', 'transparent');
                if(this.chart) {
                    this.chart.getEl().setStyle('background-color', 'transparent');
                }
            }
        } else {
            this.cls     = '';
            this.bodyCls = '';
            this.shadow = 'sides';
            if(this.rendered) {
                this.removeCls('autohideheader');
                this.body.removeCls('autohideheader');
                this.getEl().enableShadow();
                this.getEl().setStyle('background-color', '');
                if(this.chart) {
                    this.chart.getEl().setStyle('background-color', '#FFFFFF');
                }
            }
        }
        var global = Ext.getCmp(this.panel_id);
        if((global.xdata.autohideheader || this.alwaysBorderless) && this.xdata.showborder != true) {
            if(this.header) {
                this.header.hide();
            }
        }
        if(this.xdata.showborder == true) {
            this.header.show();
        }
    }
});

