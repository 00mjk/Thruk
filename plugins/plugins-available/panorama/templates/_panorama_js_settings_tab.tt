var backgrounds = Ext.create('Ext.data.Store', {
    fields: ['path', 'image'],
    proxy: {
        type: 'ajax',
        url: 'panorama.cgi?task=userdata_images',
        reader: {
            type: 'json',
            root: 'data'
        }
    },
    autoLoad: false,
    data : []
});

/* show settings window */
TP.tabSettingsWindow = function() {
    var tab    = Ext.getCmp('tabpan').getActiveTab();
    var config = tab.getState();
    config.id  = tab.id;

    backgrounds.load();

    /* the settings form */
    var settings_form = new Ext.form.Panel({
        bodyPadding: 5,
        border:      0,
        defaults: {
            labelWidth:  120,
            anchor: '99%'
        },
        items: [{
            /* tab title */
            xtype:      'textfield',
            name:       'title',
            fieldLabel: 'Title'
        }, {
            /* global refresh rate */
            xtype:      'tp_slider',
            fieldLabel: 'Refresh Rate',
            formConf: {
                value:      config.xdata.refresh,
                minValue:   0,
                nameS:      'refresh',
                nameL:      'refresh_txt'
            }
        }, {
            xtype:      'combobox',
            name:       'background',
            fieldLabel: 'Background',
            store:       backgrounds,
            queryMode:  'local',
            displayField: 'image',
            valueField: 'path'
        }, {
            /* global backends */
            fieldLabel: 'Backends / Sites',
            xtype:      'checkboxgroup',
            vertical:    true,
            columns:     6,
            style:      'padding-left: 0;',
            defaults:   {
                style:      'white-space: nowrap; margin-right: 6px;'
            },
            items:      []
        }, {
            /* auto hide panlet header */
            xtype:      'checkbox',
            fieldLabel: 'Hide Panlet Header',
            name:       'autohideheader'
        }]
    });

    /* save global settings */
    var settingsSave = function() {
        var win   = this.up('window');
        var form  = win.down('form').getForm();
        var tab   = Ext.getCmp(config.id);
        var xdata = cp.state[tab.id];
        if(form.isValid()) {
            var values = form.getFieldValues();
            delete values['refresh_txt'];
            Ext.apply(tab.xdata, values);
            tab.applyXdata();

            // save state
            tab.saveState();

            // close window
            win.destroy();
            return true;
        }
        return false;
    }

    /* the panel containing the form panel */
    var settings_panel = new Ext.panel.Panel({
        layout:     'fit',
        border:     0,
        items:      [settings_form],
        buttonAlign: 'center',
        fbar: [{ xtype:  'button', text: 'cancel', handler: function() { this.up('window').destroy() } },
               { xtype:  'button',
                 text:    'save',
                 handler: settingsSave
               }
        ],
        listeners: {
            afterrender: function(This, eOpts) {
                var tab = Ext.getCmp(config.id);
                var form = This.down('form').getForm();
                // reset backends to global ones
                tab.xdata.backends = [];
                for(var key in initial_backends) {
                    if(initial_backends[key].state != 2) {
                        tab.xdata.backends.push(key);
                    }
                }
                TP.applyFormValues(form, tab.xdata);
            }
        }
    });

    /* the actual settings window containing the panel */
    var tab_win_settings = new Ext.window.Window({
        autoShow:    true,
        modal:       true,
        width:       700,
        title:       'Dashboard Settings',
        html:        '',
        buttonAlign: 'center',
        items:       [settings_panel]
    });
};

/* set backends from list */
TP.setBackends = function(backends) {
    for(var key in initial_backend_states) {
        initial_backend_states[key] = 2;
        initial_backends[key].state = 2;
    }
    for(var nr=0; nr<backends.length; nr++) {
        var b = backends[nr];
        initial_backend_states[b] = 0;
        initial_backends[b].state = 0;
    }
    TP.setBackendsCookieAndRefresh(0);
}

/* set cookie and reload panels */
var backendSelTimer;
TP.setBackendsCookieAndRefresh = function(wait) {
    /* save current selected backends in session cookie */
    document.cookie = "thruk_backends="+Ext.Object.toQueryString(initial_backend_states)+ "; path="+cookie_path+";";

    /* reload panel */
    window.clearTimeout(backendSelTimer);
    backendSelTimer = window.setTimeout(TP.refreshAllSitePanel, wait);
}
