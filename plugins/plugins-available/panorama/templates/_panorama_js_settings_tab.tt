var backgrounds = Ext.create('Ext.data.Store', {
    fields: ['path', 'image'],
    proxy: {
        type: 'ajax',
        url: 'panorama.cgi?task=userdata_images',
        reader: {
            type: 'json',
            root: 'data'
        }
    },
    autoLoad: false,
    data : []
});

TP.getExportTab = function(options) {
    var exportItems = [{
        xtype:      'fieldcontainer',
        fieldLabel: 'Export',
        items: [{
            xtype: 'button',
            text:  'Active Tab',
            handler: function() {
                Ext.MessageBox.show({
                    title:      'Current Tab Export',
                    multiline:  true,
                    width:      600,
                    msg:        'Copy this string and use it for later import:',
                    value:      '# Thruk Panorama Dashboard Export: '+options.tab.title+'\n'+encode64(cp.lastdata[options.tab.id]).match(/.{1,65}/g).join("\n")+"\n# End Export",
                    buttons:    Ext.MessageBox.OK,
                    icon:       Ext.MessageBox.INFO
                });
            }
        }]
    }, {
        xtype:      'fieldcontainer',
        fieldLabel: ' ',
        labelSeparator: ' ',
        items: [{
            xtype: 'button',
            text: 'All Open Tabs',
            handler: function() {
                Ext.MessageBox.show({
                    title:      'All Tabs Export',
                    multiline:  true,
                    width:      600,
                    msg:        'Copy this string and use it for later import:',
                    value:      '# Thruk Panorama Dashboard Export\n'+encode64(cp.encodeValue(cp.readValues())).match(/.{1,65}/g).join("\n")+"\n# End Export",
                    buttons:    Ext.MessageBox.OK,
                    icon:       Ext.MessageBox.INFO
                });
            }
        }]
    }, {
        xtype:      'fieldcontainer',
        fieldLabel: 'Import',
        items: [{
            xtype: 'button',
            text: 'Import Tab(s)',
            handler: function() {
                Ext.MessageBox.prompt({
                    title:      'Import Tab(s)',
                    id:         'importdialog',
                    multiline:  true,
                    value:      '',
                    width:      600,
                    msg:        'Enter Saved String.<br>This will add the imported tabs next to your current ones.',
                    buttons:    Ext.MessageBox.OKCANCEL,
                    icon:       Ext.MessageBox.INFO,
                    fn:         function(btn, text, window){
                        if(btn == 'ok') {
                            if(TP.importAllTabs(text)) {
                                if(options.close_handler) { options.close_handler(); }
                            }
                        }
                    }
                });
            }
        }]
    }, {
        xtype:      'fieldcontainer',
        fieldLabel: 'Reset',
        items: [{
            xtype: 'button',
            text: 'Reset to Default View',
            handler: function() {
                Ext.Msg.confirm('Reset to default view?', 'Do you really want to reset all tabs and windows?', function(button) {
                    if (button === 'yes') {
                        if(options.close_handler) { options.close_handler(); }
                        Ext.MessageBox.alert('Success', 'Reset Successful!<br>Please wait while page reloads...');
                        window.location = 'panorama.cgi?clean=1';
                    }
                });
            }
        }]
    }];
    var exportTab = {
        title : 'Import/Export',
        type  : 'panel',
        listeners: options.listeners,
        items: [{
            xtype : 'panel',
            layout: 'fit',
            border: 0,
            items: [{
                    xtype:           'form',
                    bodyPadding:     2,
                    border:          0,
                    bodyStyle:       'overflow-y: auto;',
                    submitEmptyText: false,
                    defaults:      { anchor: '-12', labelWidth: 130 },
                    items:           exportItems
            }]
        }]
    };
    return(exportTab);
}


/* show settings window */
TP.tabSettingsWindow = function() {
    var tabpan = Ext.getCmp('tabpan');
    var tab    = tabpan.getActiveTab();

    /* stop rotation */
    TP.stopRotatingTabs();

    backgrounds.load();

    var exportTab = TP.getExportTab({tab: tab, close_handler: function() { tab_win_settings.close() }});

    var generalItems = [{
        xtype:   'panel',
        html:    'These settings apply to all dashboards:',
        style:   'text-align: center;',
        padding: '0 0 10 0',
        border:   0
    },{
        /* rotating tabs */
        xtype:      'tp_slider',
        fieldLabel: 'Rotate Tabs',
        formConf: {
            minValue:   0,
            nameS:      'rotate_tabs',
            nameL:      'rotate_tabs_txt'
        }
    }, {
        /* show server time */
        xtype:      'checkbox',
        fieldLabel: 'Show Server Time',
        name:       'server_time',
        boxLabel:   '(display server time next to the menu)'
    }];
    var generalTab = {
        title : 'General',
        type  : 'panel',
        items: [{
            xtype : 'panel',
            layout: 'fit',
            border: 0,
            items: [{
                    xtype:           'form',
                    id:             'generalForm',
                    bodyPadding:     2,
                    border:          0,
                    bodyStyle:       'overflow-y: auto;',
                    submitEmptyText: false,
                    defaults:      { anchor: '-12', labelWidth: 130 },
                    items:           generalItems
            }]
        }]
    };


    /* Backend Settings Tab */
    var backends = TP.getBackendsArray(initial_backends);
    if(backends.length > 1) {
        var backendsItems = [{
                /* use backends */
                xtype:      'checkbox',
                fieldLabel: 'Select Backends',
                name:       'select_backends',
                listeners: {
                    change: function(This, newValue, oldValue, eOpts) {
                        this.up().items.get(1).setDisabled(!newValue);
                    }
                },
                checked: tab.xdata.select_backends,
                boxLabel:   '(enable to select a subset of backends)'
            }, {
                /* backends */
                fieldLabel: 'Backends / Sites',
                xtype:      'itemselector',
                name:       'backends',
                height:     120,
                disabled:   !tab.xdata.select_backends,
                buttons:   ['add', 'remove'],
                store:     backends,
                value:     tab.xdata.backends
        }];
        var backendsTab = {
            title : 'Backends',
            type  : 'panel',
            items: [{
                xtype : 'panel',
                layout: 'fit',
                border: 0,
                items: [{
                        xtype:          'form',
                        id:             'backendsForm',
                        bodyPadding:     2,
                        border:          0,
                        bodyStyle:      'overflow-y: auto;',
                        submitEmptyText: false,
                        defaults:      { anchor: '-12', labelWidth: 130 },
                        items:           backendsItems
                }]
            }]
        };
    }


    /* Dashboard Settings Tab */
    var dashboardItems = [{
            xtype:      'checkbox',
            fieldLabel: 'Locked',
            name:       'locked',
            boxLabel:   '(disables dashboard editing)',
            handler:    function(el, checked) { tab.setLock(checked); tab_win_settings.toFront(); }
    }, {
            /* tab title */
            xtype:      'textfield',
            name:       'title',
            fieldLabel: 'Title'
        }, {
            /* global refresh rate */
            xtype:      'tp_slider',
            fieldLabel: 'Refresh Rate',
            formConf: {
                minValue:   0,
                nameS:      'refresh',
                nameL:      'refresh_txt'
            }
        }, {
            xtype:      'combobox',
            name:       'background',
            fieldLabel: 'Background',
            store:       backgrounds,
            queryMode:  'local',
            displayField: 'image',
            valueField: 'path'
        }, {
            /* auto hide panlet header */
            xtype:      'checkbox',
            fieldLabel: 'Hide Panlet Header',
            name:       'autohideheader',
            boxLabel:   ' (widget header will be displayed on mouse over.)'
    }];
    var dashboardTab = {
        title : 'Dashboard',
        type  : 'panel',
        items: [{
            xtype : 'panel',
            layout: 'fit',
            border: 0,
            items: [{
                    xtype:          'form',
                    id:             'dashboardForm',
                    bodyPadding:     2,
                    border:          0,
                    bodyStyle:      'overflow-y: auto;',
                    submitEmptyText: false,
                    defaults:      { anchor: '-12', labelWidth: 130 },
                    items:           dashboardItems
            }]
        }]
    };

    /* tab layout for settings window */
    var tabPanel = new Ext.TabPanel({
        activeTab         : 0,
        enableTabScroll   : true,
        items             : [
            dashboardTab,
            backendsTab,
            exportTab,
            generalTab
        ]
    });

    /* the actual settings window containing the panel */
    var tab_win_settings = new Ext.window.Window({
        autoShow:    true,
        modal:       true,
        width:       500,
        height:      250,
        title:       'Settings',
        layout :     'fit',
        buttonAlign: 'center',
        items:       tabPanel,
        fbar: [{/* cancel button */
                    xtype:  'button',
                    text:   'cancel',
                    handler: function(This) {
                        tab_win_settings.destroy();
                    }
                }, {
                /* save button */
                    xtype : 'button',
                    text:   'save',
                    handler: function() {
                        var win     = this.up('window');

                        var d_form  = Ext.getCmp('dashboardForm').getForm();
                        if(!d_form.isValid()) { return false; }
                        var values = d_form.getFieldValues();
                        delete values['refresh_txt'];
                        Ext.apply(tab.xdata, values);

                        var b_form  = Ext.getCmp('backendsForm').getForm();
                        if(!b_form.isValid()) { return false; }
                        var values = b_form.getFieldValues();
                        Ext.apply(tab.xdata, values);

                        tab.applyXdata(undefined, false);
                        tab.saveState();

                        var g_form  = Ext.getCmp('generalForm').getForm();
                        if(!g_form.isValid()) { return false; }
                        var values = g_form.getFieldValues();
                        delete values['rotate_tabs_txt'];
                        Ext.apply(tabpan.xdata, values);

                        tabpan.saveState();
                        tabpan.startTimeouts();

                        TP.refreshAllSitePanel(tab);

                        tab_win_settings.destroy();
                        return true;
                    }
               }
        ],
        listeners: {
            destroy: function() {
                // restore locked setting
                tab.setLock(tab.xdata.locked);
            }
        },
    });
    Ext.getCmp('dashboardForm').getForm().setValues(tab.xdata);
    Ext.getCmp('generalForm').getForm().setValues(tabpan.xdata);
};
