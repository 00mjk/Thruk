Ext.define('TP.Pantab', {
    extend: 'Ext.panel.Panel',

    [% UNLESS readonly %]
    tooltip:     'double click to rename',
    closable:    true,
    [% ELSE %]
    closable:    false,
    [% END %]
    stateful:    true,
    stateEvents: ['add', 'titlechange'],
    initComponent: function() {
        if(this.xdata == undefined) {
            this.xdata = {};
        } else {
            this.xdata = TP.clone(this.xdata);
        }
        // defaults are set in panorama.pm

        // fetch window ids from ExtState
        this.window_ids = [];
        for(var key in ExtState) {
            var matches = key.match(/^(tabpan-tab_\d+)_panlet_(\d+)$/);
            if(matches && matches[1] == this.id) {
                this.window_ids.push(key);
            }
        }

        this.callParent();
    },
    listeners: {
        destroy: function( This, eOpts ) {
            for(var nr=0; nr<This.window_ids.length; nr++) {
                if(This.window_ids[nr].xdata == undefined) {
                    Ext.getCmp(This.window_ids[nr]).destroy();
                }
            }
            var tabpan = Ext.getCmp('tabpan');
            tabpan.open_tabs = TP.removeFromList(tabpan.open_tabs, This.id);
            cp.clear(This.id);
            // activate first tab or create new empty one
            if(!tabpan.getActiveTab()) {
                var tabs = Ext.query('.x-tab-closable');
                for(var nr=0; nr<tabs.length; nr++) {
                    if(tabpan.tabs_tr[tabs[nr].id] != undefined) {
                        tabpan.setActiveTab(tabpan.tabs_tr[tabs[nr].id]);
                    }
                }
            }
            if(!tabpan.getActiveTab()) {
                TP.add_pantab();
            }
            tabpan.saveState();
        },
        activate: function(This, eOpts) {
            for(var nr=0; nr<This.window_ids.length; nr++) {
                var panlet = Ext.getCmp(This.window_ids[nr]);
                if(panlet) { // may not yet exists due to delayed rendering
                    try {    // so allow it to fail
                        panlet.show(false);
                    } catch(e) { debug(e) }
                }
            }
            // save current active tab unless we are in tab rotation mode
            var tabpan = Ext.getCmp('tabpan');
            if(tabpan.xdata.rotate_tabs <= 0) {
                tabpan.saveState();
            }
        },
        hide: function(This, eOpts) {
            for(var nr=0; nr<This.window_ids.length; nr++) {
                var panlet = Ext.getCmp(This.window_ids[nr]);
                if(panlet) {
                    panlet.hide(false);
                }
            }
        },
        afterrender: function(This, eOpts) {
            if(!this.title) {
                this.applyXdata();
            }
            var header = This.getDockedItems()[0];
            if(header) { header.hide() }
        },
        beforerender: function(This, eOpts) {
            for(var nr=0; nr<This.window_ids.length; nr++) {
                var panlet = Ext.getCmp(This.window_ids[nr]);
                if(panlet) {
                    panlet.hide();
                }
            }
        }
    },
    getState: function() {
        var state = {
            xdata: this.xdata
        };
        return state;
    },
    applyState: function(state) {
        this.callParent(arguments);
        if(state) {
            // REMOVE AFTER: 01.01.2016
            // migrate old settings
            if(state.xdata == undefined) { state.xdata = {} }
            var oldKeys = ['window_ids', 'background', 'title'];
            for(var x=0; x<oldKeys.length; x++) {
                var key = oldKeys[x];
                if(state[key]) {
                    state.xdata[key] = state[key];
                    delete this[key];
                    delete state[key];
                }
            }
            // migrate some global settings
            var global = Ext.getCmp('tabpan');
            var oldGlobals = ['refresh', 'backends', 'autohideheader'];
            for(var x=0; x<oldGlobals.length; x++) {
                var key = oldGlobals[x];
                if(global.xdata[key] != undefined) {
                    state.xdata[key] = global.xdata[key];
                }
            }

            // REMOVE AFTER: 01.01.2016
            if(state.xdata.window_ids) {
                this.window_ids = state.xdata.window_ids;
            }

            // create panlets
            for(var nr=0; nr<this.window_ids.length; nr++) {
                // delayed panlet creation
                var autoshow = false;
                var delay    = TP.initial_create_delay_inactive;
                if(TP.initial_active_tab != undefined && this.id == TP.initial_active_tab) {
                    autoshow = true;
                    delay    = TP.initial_create_delay_active;
                }
                var tabpan    = Ext.getCmp('tabpan');
                var activeTab = tabpan.getActiveTab();
                TP.timeouts['timeout_' + this.window_ids[nr] + '_render'] = window.setTimeout(Ext.bind(TP.add_panlet, this, [{id:this.window_ids[nr], skip_state:true, tb:this, autoshow:autoshow}, false]), delay);

                if(autoshow) {
                   TP.initial_create_delay_active   = TP.initial_create_delay_active   + 200;
                } else {
                   TP.initial_create_delay_inactive = TP.initial_create_delay_inactive + 50;
                }
            };
            Ext.apply(this.xdata, state.xdata);
        }
        this.applyXdata();
    },
    applyXdata: function(xdata, startTimeouts) {
        if(xdata == undefined) {
            xdata = this.xdata;
        }
        this.setTitle(xdata.title);
        this.setBackground(xdata.background);
        if(TP.initialized && startTimeouts != false) {
            this.startTimeouts();
        }
    },

    /* start all timed actions for this tab and its panels */
    startTimeouts: function() {
        this.stopTimeouts();

        var tabpan    = Ext.getCmp('tabpan');
        var activeTab = tabpan.getActiveTab();

        /* ensure panels from the active tab are displayed */
        if(activeTab && this.id == activeTab.id) {
            if(this.window_ids) {
                for(var nr=0; nr<this.window_ids.length; nr++) {
                    var panlet = Ext.getCmp(this.window_ids[nr]);
                    if(panlet) { // may not yet exists due to delayed rendering
                        try {    // so allow it to fail
                            panlet.show(false);
                        } catch(e) { debug(e) }
                    }
                }
            }
        }

        /* start refresh for all panlets with our refresh rate */
        var panels = TP.getAllPanel(this);
        if(panels.length > 0) {
            // spread panel reload
            var delay    = 0;
            var interval = 60 / panels.length;
            for(var nr=0; nr<panels.length; nr++) {
                var p = panels[nr];
                if(p.startTimeouts) {
                    TP.timeouts['timeout_' + p.id + '_delayed_start'] = window.setTimeout(Ext.bind(p.startTimeouts, p, []), delay);
                    delay = delay + Math.round(interval*1000);
                }
                if(p.header) {
                    if(this.xdata.autohideheader) { p.header.hide() } else { p.header.show() }
                }
            }
        }
        var This = this;
        if(activeTab && activeTab.xdata && activeTab.xdata.refresh > 0) {
            TP.timeouts['interval_global_icons' + This.id + '_refresh'] = window.setInterval(function() { TP.updateAllIcons(This) }, activeTab.xdata.refresh * 1000);
        }

        TP.updateAllIcons(This);
        if(TP.initMask) { TP.initMask.destroy() }
    },

    /* stop all timed actions for this tab and its panels */
    stopTimeouts: function() {
        /* start refresh for all panlets with our refresh rate */
        var panels = TP.getAllPanel(this);
        for(var nr=0; nr<panels.length; nr++) {
            if(panels[nr].stopTimeouts) {
                panels[nr].stopTimeouts();
            }
        }

        window.clearInterval(TP.timeouts['interval_global_icons' + this.id + '_refresh']);
    },
    setBackground: function(background) {
        if(background != undefined && background != 'none') {
            this.setBodyStyle("background:url('"+background+"');");
            this.setBodyStyle("background-repeat:no-repeat;");
        } else {
            this.setBodyStyle("background:#ffffff");
        }
    }
});
