Ext.define('TP.PanletGrid', {
    extend: 'TP.Panlet',

    title:  'grid',
    width:  640,
    height: 260,
    initComponent: function() {
        this.callParent();

        this.loader = {
            autoLoad: false,
            renderer: 'data',
            scope:    this,
            url:      '',
            loading:  false,
            listeners: {
                'beforeload': function(This, options, eOpts) {
                    if(this.loading) {
                        return false;
                    }
                    this.loading = true;
                    return true;
                }
            },
            callback: function(This, success, response, options) {
                This.loading = false;
                if(response.status == 200) {
                    var data   = eval("("+response.responseText+")");
                    var fields = [];

                    var newcolumns = Ext.JSON.encode(data.columns);
                    for(key in data.columns) {
                        fields.push(data.columns[key].dataIndex);
                        for(key2 in data.columns[key]) {
                            /* this is usually a function, so eval it */
                            if(key2 == 'renderer') {
                                eval('data.columns[key][key2]=' + data.columns[key][key2]);
                            }
                        }
                    }
                    this.gridStore = Ext.create('Ext.data.Store', {
                        data:  {'items': data.data },
                        fields: fields,
                        proxy: {
                            type: 'memory',
                            reader: {
                                type: 'json',
                                root: 'items'
                            }
                        }
                    });
                    if(this.gridcolumns == undefined || this.gridcolumns != newcolumns) {
                        this.gridcolumns = newcolumns;
                        this.grid.reconfigure(this.gridStore, data.columns);
                    } else {
                        this.grid.reconfigure(this.gridStore);
                    }
                    if(this.xdata.gridstate != undefined) {
                        this.grid.applyState(this.xdata.gridstate);
                    }
                    if(this.initialState != undefined) {
                        /* applyState throws internal error but state gets applied anyway */
                        try {
                            this.grid.applyState(this.initialState);
                        } catch(e) {}
                    }
                } else {
                    var row = {date: new Date(), empty:''};
                    debug("ERROR: " + response.status);
                    debug(response);
                }
            }
        };

        this.grid = Ext.create('Ext.grid.Panel', {
            store: this.gridStore,
            id: this.id + '_gridpanel',
            stateful: true,
            stateEvents: ['reconfigure', 'afterlayout', 'columnmove', 'columnresize', 'sortchange', 'groupchange'],
            listeners: {
                beforestatesave: function(This, state, eOpts) {
                    /* only save filled grids state */
                    if(This.columns.length == 0) {
                        return false;
                    }
                    var panlet = This.up('panel');
                    panlet.xdata.gridstate = state;
                    panlet.saveState();
                    return false;
                }
            },
            columns: []
        });
        this.addListener('beforestaterestore', function(This, state, eOpts) {
            if(state.xdata.gridstate != undefined) {
                This.grid.applyState(state.xdata.gridstate);
            }
            return true;
        });
        var state = cp.get(this.id);
        if(state && state.xdata && state.xdata.gridstate) {
            this.initialState = Ext.JSON.decode(Ext.JSON.encode(state.xdata.gridstate));
        }

        this.add(this.grid);

        this.refreshHandler = function() {
            TP.defaultSiteRefreshHandler(this);
        };
        this.addListener('afterrender', function() {
            this.refreshHandler();
        });

        this.down('form').add({
            fieldLabel: 'URL',
            xtype:      'textfield',
            name:       'url'
        });
    }
});
