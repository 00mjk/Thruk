/* show settings window */
TP.settingsWindow = function() {

    /* stop rotation */
    TP.stopRotatingTabs();

    /* the settings form */
    var settings_form = new Ext.form.Panel({
        bodyPadding: 5,
        border:      0,
        defaults:  { labelWidth:  120 },
        items: [{
            /* global refresh rate */
            xtype:      'tp_slider',
            fieldLabel: 'Global Refresh Rate',
            formConf: {
                value:      60,
                minValue:   0,
                nameS:      'refresh',
                nameL:      'refresh_txt'
            }
        }, {
            /* global backends */
            id:         'global_backends',
            fieldLabel: 'Backends / Sites',
            xtype:      'checkboxgroup',
            vertical:   true,
            columns:    6,
            style:      'padding-left: 0;',
            defaults:    {
                style:      'white-space: nowrap; margin-right: 6px;'
            },
            items:      []
        }, {
            /* rotating tabs */
            xtype:      'tp_slider',
            fieldLabel: 'Rotate Tabs',
            formConf: {
                value:      0,
                minValue:   0,
                nameS:      'rotate_tabs',
                nameL:      'rotate_tabs_txt'
            }
        }, {
            /* show server time */
            xtype:      'checkbox',
            fieldLabel: 'Show Server Time',
            name:       'server_time'
        }, {
            /* auto hide panlet header */
            xtype:      'checkbox',
            fieldLabel: 'Hide Panlet Header',
            name:       'autohideheader'
        }, {
            /* Import / Export */
            fieldLabel: 'Import/Export',
            xtype: 'fieldcontainer',
            border: false,
            layout: 'table',
            defaults: {
                style: 'margin-right: 5px;',
                width: 120
            },
            items: [{
                xtype: 'button',
                text: 'Export All Tabs',
                handler: function() {
                    Ext.MessageBox.show({
                        title:      'All Tabs Export',
                        multiline:  true,
                        width:      600,
                        msg:        'Copy this string and use it for later import:',
                        value:      '# Thruk Panorama Dashboard Export\n'+encode64(cp.encodeValue(cp.readValues())).match(/.{1,70}/g).join("\n")+"\n# End Export",
                        buttons:    Ext.MessageBox.OK,
                        icon:       Ext.MessageBox.INFO
                    });
                }
            }, {
                xtype: 'button',
                text: 'Import All Tabs',
                handler: function() {
                    Ext.MessageBox.prompt({
                        title:      'Import Tabs Export',
                        id:         'importdialog',
                        multiline:  true,
                        value:      '',
                        width:      500,
                        msg:        'Enter Saved String.<br>This will replace all currently existing Tabs and windows!',
                        buttons:    Ext.MessageBox.OKCANCEL,
                        icon:       Ext.MessageBox.INFO,
                        fn:         function(btn, text, window){
                            if(btn == 'ok') {
                                if(TP.importAllTabs(text)) {
                                    win_settings.close();
                                    Ext.MessageBox.alert('Success', 'Import Successful!<br>Please wait while page reloads...');
                                }
                            }
                        }
                    });
                }
            }, {
                xtype: 'button',
                text: 'Reset to Default View',
                handler: function() {
                    Ext.Msg.confirm('Reset to default view?', 'Do you really want to reset all tabs and windows?', function(button) {
                        if (button === 'yes') {
                            win_settings.close();
                            Ext.MessageBox.alert('Success', 'Reset Successful!<br>Please wait while page reloads...');
                            window.location = 'panorama.cgi?clean=1';
                        }
                    });
                }
            }]
        }]
    });

    /* save global settings */
    var settingsSave = function() {
        var win = this.up('window');
        var tab = Ext.getCmp('tabpan');
        var form = win.down('form').getForm();
        if(form.isValid()) {
            tab.xdata = TP.storeFormToData(form, tab.xdata);
            TP.setRefreshText(tab.xdata, 'rotate_tabs', 'rotate_tabs_txt');
            TP.applyFormValues(form, tab.xdata);
            TP.setBackends(tab.xdata.backends);
            delete tab.xdata['rotate_tabs_txt'];
            tab.saveState();
            win.destroy();
            TP.startRotatingTabs();
            TP.startServerTime();
            /* start refresh for all panlets with global refresh rate */
            var panels = TP.getAllPanel();
            for(var nr=0; nr<panels.length; nr++) {
                var p = panels[nr];
                if(p.xdata.refresh == -1) {
                    p.startInterval();
                }
                if(tab.xdata.autohideheader) { p.header.hide() } else { p.header.show() }
            }
            return true;
        }
        return false;
    }

    /* the panel containing the form panel */
    var settings_panel = new Ext.panel.Panel({
        layout:     'fit',
        border:     0,
        items:      [settings_form],
        buttonAlign: 'center',
        fbar: [{ xtype:  'button', text: 'cancel', handler: function() { this.up('window').destroy() } },
               { xtype:  'button',
                 text:    'save',
                 handler: settingsSave
               }
        ],
        listeners: {
            afterrender: function(This, eOpts) {
                var tab = Ext.getCmp('tabpan');
                var form = This.down('form').getForm();
                // reset backends to global ones
                tab.xdata.backends = [];
                for(var key in initial_backends) {
                    if(initial_backends[key].state != 2) {
                        tab.xdata.backends.push(key);
                    }
                }
                TP.setRefreshText(tab.xdata, 'rotate_tabs', 'rotate_tabs_txt');
                TP.applyFormValues(form, tab.xdata);
                delete tab.xdata['rotate_tabs_txt'];
            }
        }
    });

    /* the actual settings window containing the panel */
    var win_settings = new Ext.window.Window({
        autoShow:    true,
        modal:       true,
        width:       700,
        title:       'Global Settings',
        html:        '',
        buttonAlign: 'center',
        items:       [settings_panel]
    });
    // checkboxes are wrong otherwise
    Ext.getCmp('global_backends').reset();
};


/* set backends from list */
TP.setBackends = function(backends) {
    for(var key in initial_backend_states) {
        initial_backend_states[key] = 2;
        initial_backends[key].state = 2;
    }
    for(var nr=0; nr<backends.length; nr++) {
        var b = backends[nr];
        initial_backend_states[b] = 0;
        initial_backends[b].state = 0;
    }
    TP.setBackendsCookieAndRefresh(0);
}

/* set cookie and reload panels */
var backendSelTimer;
TP.setBackendsCookieAndRefresh = function(wait) {
    /* save current selected backends in session cookie */
    document.cookie = "thruk_backends="+Ext.Object.toQueryString(initial_backend_states)+ "; path="+cookie_path+";";

    /* reload panel */
    window.clearTimeout(backendSelTimer);
    backendSelTimer = window.setTimeout(TP.refreshAllSitePanel, wait);
}
