/* show settings window */
TP.settingsWindow = function() {

    /* the settings form */
    var settings_form = new Ext.form.Panel({
        bodyPadding: 5,
        border:      0,
        defaults: {
            labelWidth:  120,
            anchor: '99%'
        },
        items: [{
            xtype:      'tp_slider',
            formConf: {
                fieldLabel: 'Global Refresh Rate',
                value:      30,
                minValue:   0,
                nameS:      'refresh',
                nameL:      'refresh_txt'
            }
        }, new Ext.form.CheckboxGroup({
            id:         'global_backends',
            fieldLabel: 'Backends / Sites',
            xtype:      'checkboxgroup',
            vertical:   true,
            columns:    1,
            items:      []
        })]
    });

    /* the panel containing the form panel */
    var settings_panel = new Ext.panel.Panel({
        layout:     'fit',
        border:     0,
        items:      [settings_form],
        buttonAlign: 'center',
        fbar: [{ xtype : 'button', text: 'cancel', handler: function() { this.up('window').destroy() } },
               { xtype : 'button',
                 text:   'save',
                 handler: function() {
                    var win = this.up('window');
                    var tab = Ext.getCmp('tabpan');
                    var form = win.down('form').getForm();
                    if(form.isValid()) {
                        tab.xdata = TP.storeFormToData(form, tab.xdata);
                        TP.applyFormValues(form, tab.xdata);
                        TP.setBackends(tab.xdata.backends);
                        tab.saveState();
                        win.destroy();
                    }
                 }
               }
        ],
        listeners: {
            afterrender: function(This, eOpts) {
                var tab = Ext.getCmp('tabpan');
                var form = This.down('form').getForm();
                // reset backends to global ones
                tab.xdata.backends = [];
                for(var nr in initial_backends) {
                    if(initial_backends[nr].state != 2) {
                        tab.xdata.backends.push(nr);
                    }
                }
                TP.applyFormValues(form, tab.xdata);
            }
        }
    });

    /* the actual settings window containing the panel */
    var win_settings = new Ext.window.Window({
        autoShow:    true,
        modal:       true,
        width:       400,
        title:       'Global Settings',
        html:        '',
        buttonAlign: 'center',
        items:       [settings_panel]
    });
    // checkboxes are wrong otherwise
    Ext.getCmp('global_backends').reset();
};


/* set backends from list */
TP.setBackends = function(backends) {
    for(var nr in initial_backend_states) {
        initial_backend_states[nr] = 2;
        initial_backends[nr].state = 2;
    }
    for(var nr in backends) {
        var b = backends[nr];
        initial_backend_states[b] = 0;
        initial_backends[b].state = 0;
    }
    TP.setBackendsCookieAndRefresh(0);
}

/* set cookie and reload panels */
var backendSelTimer;
TP.setBackendsCookieAndRefresh = function(wait) {
    /* save current selected backends in session cookie */
    document.cookie = "thruk_backends="+Ext.Object.toQueryString(initial_backend_states)+ "; path="+cookie_path+";";

    /* reload panel */
    window.clearTimeout(backendSelTimer);
    backendSelTimer = window.setTimeout(TP.refreshAllSitePanel, wait);
}