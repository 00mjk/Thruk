Ext.define('TP.IconWidget', {
    extend: 'Ext.Img',

    src: '../usercontent/images/status/default/pending.png',
    [% UNLESS readonly %]
    stateful:  true,
    stateEvents: ['reconfigure', 'afterlayout', 'move'],
    draggable: true,
    width: 16,
    height: 16,
    [% END %]
    floating:  true,
    cls: 'iconWidget',
    initComponent: function() {
        this.callParent();
        this.stateId = this.id;
        if(this.xdata == undefined) {
            this.xdata = {};
        } else {
            this.xdata = TP.clone(this.xdata);
        }
        this.xdata.cls      = this.$className;
        this.xdata.state    = 4;
        this.xdata.general  = {};
        this.xdata.layout   = { iconset: 'default' };
        if(this.xdata.general[this.iconType] == undefined) { this.xdata.general[this.iconType] = '' };
        this.autoEl = {
            tag:     'a',
            href:    '#',
            target:  '',
            onclick: "return(TP.iconClickHandler('"+this.id+"'));"
        };
    },
    listeners: {
        afterrender: function(This, eOpts) {
            [% UNLESS readonly %]
            This.saveState();
            /* open edit box on double or right click */
            this.el.on("dblclick", function(e) {
                window.clearTimeout(TP.timeouts['click'+This.id]);
                TP.iconShowEditDialog(This);
            });
            this.el.down('img').on("load", function (evt, ele, opts) {
                This.setSize(This.el.down('img').getSize());
                This.el.shadow.el.removeCls('hidden');
            });
            /* right click context menu on icon widgets */
            this.el.on("contextmenu", function(e) {
                e.preventDefault();
                Ext.create('Ext.menu.Menu', {
                    margin: '0 0 10 0',
                    items: [{
                        text:   'Settings',
                        icon:   '[% url_prefix %]plugins/panorama/images/cog.png',
                        handler: function() { TP.iconShowEditDialog(This) }
                    }, {
                        text:   'Refresh',
                        icon:   '[% url_prefix %]plugins/panorama/images/arrow_refresh.png',
                        handler: function() { TP.updateAllIcons(Ext.getCmp(This.panel_id), This.id) }
                    },'-',{
                        text:   'Clone',
                        icon:   '[% url_prefix %]plugins/panorama/images/page_copy.png',
                        handler: function() { TP.add_panlet_delayed({type:This.xdata.cls, state:TP.clone_panel_config(This)}, -8, -8) }
                    },{
                        text:   'Remove',
                        icon:   '[% url_prefix %]plugins/panorama/images/delete.png',
                        handler: function(me, eOpts) {
                            var menu = me.parentMenu;
                            var i = menu.items.findIndexBy(function(e) { if(e.text == 'Remove') {return true;} });
                            menu.remove(i);
                            menu.add({
                                xtype: 'panel',
                                border: false,
                                bodyStyle: 'background: #F0F0F0;',
                                items: [{
                                    xtype:  'label',
                                    text:   'Remove? ',
                                    style:  'top: 3px; position: relative; color: red; font-weight: bold;'
                                },{
                                    xtype:  'button',
                                    text:   'No',
                                    width:  50,
                                    handler: function() { menu.destroy(); }
                                }, {
                                    xtype: 'button',
                                    text:  'Yes',
                                    width:  30,
                                    handler: function() { This.destroy(); menu.destroy(); }
                                }]
                            });
                            menu.move(menu.items.length, i);
                        }
                    }],
                    listeners: {
                        beforehide: function(menu, eOpts) { menu.destroy(); }
                    }
                }).showBy(This);
            });
            if(this.xdata.general[this.iconType] == '') {
                this.firstRun = true;
                TP.suppressIconTip = true;
                TP.timeouts['timeout_' + this.id + '_show_settings'] = window.setTimeout(function() {
                    // show dialog delayed, so the panel has a position already
                    TP.iconShowEditDialog(This);
                }, 10);
            }
            [% END %]
            TP.timeouts['timeout_' + this.id + '_sync_shadow'] = window.setTimeout(function() {
                if(This.el) { This.syncShadow(); }
            }, 250);
        },
        show: function( This, eOpts ) {
            if(This.dd && !This.dd_listener_added) {
                This.dd.addListener('dragstart', function(This, eOpts) {
                    TP.suppressIconTip = true;
                });
                This.dd.addListener('dragend', function(This, eOpts) {
                    TP.suppressIconTip = false;
                });
                This.dd_listener_added = true;
            }
        },
        destroy: function( This, eOpts ) {
            /* remove window from panels window ids */
            TP.removeWindowFromPanels(this.id);
            /* clear state information */
            cp.clear(this.id);
        },
        move: function(This, x, y, eOpts) {
            this.xdata.layout.x = x;
            this.xdata.layout.y = y;
            // update settings window
            if(this.settingsWindow) {
                this.settingsWindow.items.getAt(0).items.getAt(1).down('form').getForm().setValues({x:x, y:y});
            }
        }
    },
    refreshHandler: function(newStatus) {
        if(newStatus != undefined && this.xdata.state != newStatus) {
            this.xdata.state = newStatus;
            TP.timeouts['timeout_' + this.id + '_flicker'] = window.setTimeout(TP.flickerImg(this.id), 200);
            this.saveState();
        }
        iconset = this.xdata.layout.iconset;
        if(this.iconType == 'host') {
            if(     this.xdata.state == 0) { this.setSrc('../usercontent/images/status/'+iconset+'/up.png');          }
            else if(this.xdata.state == 1) { this.setSrc('../usercontent/images/status/'+iconset+'/down.png');        }
            else if(this.xdata.state == 2) { this.setSrc('../usercontent/images/status/'+iconset+'/unreachable.png'); }
            else if(this.xdata.state == 4) { this.setSrc('../usercontent/images/status/'+iconset+'/pending.png');     }
            else                           { this.setSrc('../usercontent/images/status/'+iconset+'/unknown.png');     }
        } else {
            if(     this.xdata.state == 0) { this.setSrc('../usercontent/images/status/'+iconset+'/ok.png');       }
            else if(this.xdata.state == 1) { this.setSrc('../usercontent/images/status/'+iconset+'/warning.png');  }
            else if(this.xdata.state == 2) { this.setSrc('../usercontent/images/status/'+iconset+'/critical.png'); }
            else if(this.xdata.state == 4) { this.setSrc('../usercontent/images/status/'+iconset+'/pending.png');  }
            else                           { this.setSrc('../usercontent/images/status/'+iconset+'/unknown.png');  }
        }
        var This = this;
        TP.timeouts['timeout_' + this.id + '_sync_shadow'] = window.setTimeout(function() {
            if(This.el) { This.syncShadow(); }
        }, 500)
    },
    getState: function() {
        var state      = {};
        var pos        = this.getPosition();
        state.xdata    = this.xdata;
        return state;
    },
    applyState: function(state) {
        this.callParent(arguments);
        if(state) {
            this.applyXdata(state.xdata);
        }
    },
    applyXdata: function(xdata) {
        if(xdata == undefined) { xdata = this.xdata; }

        // position
        if(xdata.layout) {
            this.setPosition([Number(xdata.layout.x), Number(xdata.layout.y)]);
        }

        // recalculate state
        this.refreshHandler();

        // add link
        if(xdata.link && xdata.link.link) {
            this.addCls('clickable');
            this.removeCls('notclickable');
            if(this.el) { this.el.dom.href=xdata.link.link; }
            this.autoEl.href=xdata.link.link;
        } else {
            this.removeCls('clickable');
            this.addCls('notclickable');
            if(this.el) { this.el.dom.href='#'; }
            this.autoEl.href='#';
        }
    }
});

TP.iconSettingsWindow = undefined;
TP.suppressIconTip    = false;
TP.iconShowEditDialog = function(panel) {
    panel.stateful = false;

    // make sure only one window is open at a time
    if(TP.iconSettingsWindow != undefined) {
        TP.iconSettingsWindow.destroy();
    }

    /* General Settings Tab */
    var generalTab = {
        title : 'General',
        type  : 'panel',
        items: [{
            xtype : 'panel',
            layout: 'fit',
            border: 0,
            items: [{
                    xtype:           'form',
                    bodyPadding:     2,
                    border:          0,
                    bodyStyle:       'overflow-y: auto;',
                    submitEmptyText: false,
                    defaults:      { anchor: '-12', labelWidth: 132 },
                    items:           panel.getGeneralItems()
            }]
        }]
    };

    /* Layout Settings Tab */
    var layoutTab = {
        title: 'Layout',
        type:  'panel',
        items: [{
            xtype : 'panel',
            layout: 'fit',
            border: 0,
            items: [{
                xtype:           'form',
                bodyPadding:     2,
                border:          0,
                bodyStyle:       'overflow-y: auto;',
                submitEmptyText: false,
                defaults:      { anchor: '-12', labelWidth: 132 },
                items: [{
                    fieldLabel: 'Position',
                    xtype:      'fieldcontainer',
                    layout:     'table',
                    defaults:  { style: 'margin-left: 5px;' },
                    items: [{ xtype: 'label', text:  'x:' },
                            { xtype: 'textfield', name:  'x', width: 40 },
                            { xtype: 'label', text:  'y:' },
                            { xtype: 'textfield', name:  'y', width: 40 },
                            { xtype: 'label', text: '(use cursor keys)', style: 'margin-left: 15px;' }
                    ]
                }, {
                    fieldLabel: 'Icon Set',
                    xtype:      'combobox',
                    name:       'iconset',
                    store:     ['default'],
                    value:      'default'
                }]
            }]
        }]
    };

    /* Link Settings Tab */
    var linkTab = {
        title: 'Link',
        type:  'panel',
        items: [{
            xtype : 'panel',
            layout: 'fit',
            border: 0,
            items: [{
                xtype:           'form',
                bodyPadding:     2,
                border:          0,
                bodyStyle:       'overflow-y: auto;',
                submitEmptyText: false,
                defaults:      { anchor: '-12', labelWidth: 132 },
                items: [{
                    fieldLabel: 'Hyperlink',
                    xtype:      'textfield',
                    name:       'link'
                }, {
                    fieldLabel: 'Link another Dashboard',
                    xtype:      'fieldcontainer',
                    items:      [{
                        xtype:      'button',
                        text:       'Choose',
                        icon:       '[% url_prefix %]plugins/panorama/images/world.png',
                        menu:       {
                            items: [{
                                text: 'My Dashboards',
                                icon: '[% url_prefix %]plugins/panorama/images/user_suit.png',
                                menu: [{
                                    text:    'Loading...',
                                    icon:    '[% url_prefix %]plugins/panorama/images/loading-icon.gif',
                                    disabled: true
                                }]
                            }, {
                                text: 'Public Dashboards',
                                icon: '[% url_prefix %]plugins/panorama/images/world.png',
                                menu: [{
                                    text:    'Loading...',
                                    icon:    '[% url_prefix %]plugins/panorama/images/loading-icon.gif',
                                    disabled: true
                                }]
                            }],
                            listeners: {
                                afterrender: function(This, eOpts) {
                                    TP.load_dashboard_menu_items(This.items.get(0).menu, 'panorama.cgi?task=dashboard_list&list=my',     function(val) { This.up('form').getForm().setValues({link: 'dashboard://'+val.replace(/^tabpan-tab_/,'')})}, true);
                                    TP.load_dashboard_menu_items(This.items.get(1).menu, 'panorama.cgi?task=dashboard_list&list=public', function(val) { debug(val)}, true);
                                }
                            }
                        }
                    }]
                }, {
                    fieldLabel: 'New Tab',
                    xtype:      'checkbox',
                    name:       'newtab',
                    boxLabel:   '(opens links in new tab or window)'
                }]
            }]
        }]
    };

    var tabPanel = new Ext.TabPanel({
        activeTab         : 0,
        enableTabScroll   : true,
        items             : [
            generalTab,
            layoutTab,
            linkTab
        ]
    });
    var settingsWindow = new Ext.Window({
        height : 300,
        width  : 400,
        layout : 'fit',
        items  : tabPanel,
        title  : 'Icon Settings',
        buttonAlign: 'center',
        fbar: [/* panlet setting cancel button */
               { xtype:  'button',
                 text:   'cancel',
                 handler: function(This) {
                    delete panel.settingsWindow;
                    panel.stateful = true;
                    // if we cancel directly after adding a new icon, destroy it
                    if(panel.firstRun) {
                        panel.destroy();
                    }
                    settingsWindow.destroy();
                 }
               },
               /* panlet setting save button */
               { xtype : 'button',
                 text:   'save',
                 handler: function() {
                    panel.stateful = true;
                    panel.xdata.general = settingsWindow.items.getAt(0).items.getAt(0).down('form').getForm().getValues();
                    panel.xdata.layout  = settingsWindow.items.getAt(0).items.getAt(1).down('form').getForm().getValues();
                    panel.xdata.link    = settingsWindow.items.getAt(0).items.getAt(2).down('form').getForm().getValues();
                    panel.applyState({xdata: panel.xdata});
                    panel.saveState();
                    TP.updateAllIcons(Ext.getCmp(panel.panel_id), panel.id);
                    delete panel.settingsWindow;
                    settingsWindow.destroy();
                    panel.firstRun = false;
                    panel.applyXdata();
                 }
               }
        ],
        listeners: {
            afterRender: function () {
                this.nav = Ext.create('Ext.util.KeyNav', this.el, {
                    'left':  function(e){ var pos = panel.getPosition(); panel.setPosition(pos[0]-1, pos[1]);   },
                    'right': function(e){ var pos = panel.getPosition(); panel.setPosition(pos[0]+1, pos[1]);   },
                    'up':    function(e){ var pos = panel.getPosition(); panel.setPosition(pos[0],   pos[1]-1); },
                    'down':  function(e){ var pos = panel.getPosition(); panel.setPosition(pos[0],   pos[1]+1); },
                    scope: panel
                });
            },
            destroy: function() {
                TP.suppressIconTip = false;
            }
        }
    }).show();

    settingsWindow.items.getAt(0).items.getAt(0).down('form').getForm().setValues(panel.xdata.general);
    settingsWindow.items.getAt(0).items.getAt(1).down('form').getForm().setValues(panel.xdata.layout);
    settingsWindow.items.getAt(0).items.getAt(2).down('form').getForm().setValues(panel.xdata.link);
    TP.iconSettingsWindow = settingsWindow;

    // new mouseover tips while settings are open
    TP.iconTip.hide();
    TP.suppressIconTip = true;

    // move settings window next to panel itself
    var panelPos     = panel.getPosition();
    var viewPortSize = TP.viewport.getSize();
    if(viewPortSize.width > panelPos[0] + 430) {
        panelPos[0] = panelPos[0] + 30;
    } else {
        panelPos[0] = panelPos[0] - 410;
    }
    if(panelPos[1] - 50 < 0) {
        panelPos[1] = 30;
    }
    else if(viewPortSize.height > panelPos[1] + 270) {
        panelPos[1] = panelPos[1] - 30;
    } else {
        panelPos[1] = viewPortSize.height - 330;
    }
    settingsWindow.showAt(panelPos);
};

Ext.onReady(function() {
    TP.iconTip = Ext.create('Ext.tip.ToolTip', {
        title:    'Details:',
        itemId:   'iconTip',
        target:    Ext.getBody(),
        delegate: 'IMG.iconWidget', // the cell class in which the tooltip has to be triggered
        showDelay: 50,
        dismissDelay: 0,
        width:     400,
        maxWidth:  400,
        //closable:  true,  // enable for easier css debuging
        style:    'background: #E5E5E5',
        bodyStyle:'background: #E5E5E5',
        shadow:   'drop',
        html:      '',
        listeners: {
            show: function(This) {
                if(TP.suppressIconTip) {
                    This.hide();
                    return false;
                }
            }
        }
    });

    var tipRenderer = function (e, el, eOpts) {
        e.stopEvent();
        var img = Ext.getCmp(el.id);
        if(img.iconType == 'filtered') {
            TP.iconTip.setTitle(img.getName());
        } else {
            TP.iconTip.setTitle(ucfirst(img.iconType)+': '+img.getName());
        }
        var d = img.getDetails();
        var details = '<table class="iconDetails">';
        for(var x=0; x<d.length; x++) {
            details += '<tr>';
            details += '<th>'+d[x][0]+'</th>';
            details += '<td>'+d[x][1]+'</td>';
            details += '</tr>';
        }
        details += '</table>';
        TP.iconTip.update(details);
        TP.iconTip.show();
    };

    Ext.getBody().on('mouseover', function(e,t,a) {
        tipRenderer(e,t,a);
    }, null, {delegate:'IMG.iconWidget'});
});


/* Host Status Icon */
Ext.define('TP.HostStatusIcon', {
    extend: 'TP.IconWidget',

    iconType: 'host',
    iconName: 'Hostname',
    initComponent: function() {
        var panel = this;
        this.callParent();
        this.xdata.general.incl_svc       = false;
        this.xdata.general.incl_downtimes = true;
        this.xdata.general.incl_ack       = true;
    },
    getGeneralItems: function() {
        var panel = this;
        return([
            TP.objectSearchItem(panel, 'host', 'Hostname'),
            {
                fieldLabel: 'Include Services',
                xtype:      'checkbox',
                name:       'incl_svc'
            }, {
                fieldLabel: 'Include Downtimes',
                xtype:      'checkbox',
                name:       'incl_downtimes'
            }, {
                fieldLabel: 'Include Acknowledged',
                xtype:      'checkbox',
                name:       'incl_ack'
            }
        ]);
    },
    getName: function() {
        return(this.xdata.general.host);
    },
    getDetails: function() {
        var details = [];
        if(!this.host) {
            return([['Status', 'No status information available']]);
        }
        var statename = TP.text_host_status(this.xdata.state);
        details.push([ 'Current Status', '<div class="extinfostate '+statename.toUpperCase()+'">'+statename.toUpperCase()+'<\/div> (for ' + TP.render_duration('', '', {data:this.host})+')'+(this.host.acknowledged?' (<img src="[% url_prefix %]plugins/panorama/images/btn_ack.png" style="vertical-align:text-bottom"> acknowledged)':'')]);
        details.push([ 'Status Information', this.host.plugin_output]);
        details.push([ 'Last Check', this.host.last_check ? TP.date_format(this.host.last_check) : 'never']);
        details.push([ 'Last Notification', (this.host.last_notification == 0 ? 'N/A' : TP.date_format(this.host.last_notification)) + ' (notification '+this.host.current_notification_number+')']);
        return(details);
    }
});

/* get summarized table for hosts */
TP.get_summarized_hoststatus = function(item) {
    var table = '<table class="ministatus"><tr>';
    table += '<th>Up</th><th>Unreachable</th><th>Down</th><th>Pending</th></tr><tr>';
    table += '<td class='+(item.up ? 'UP' : 'miniEmpty')+'>'+item.up+'</td>';
    table += '<td class='+(item.unreachable ? 'UNREACHABLE' : 'miniEmpty')+'>'+item.unreachable+'</td>';
    table += '<td class='+(item.down ? 'DOWN' : 'miniEmpty')+'>'+item.down+'</td>';
    table += '<td class='+(item.pending ? 'PENDING' : 'miniEmpty')+'>'+item.pending+'</td>';
    table += '</tr></table>';
    return(table);
}

/* get summarized table for services */
TP.get_summarized_servicestatus = function(item) {
    var table = '<table class="ministatus"><tr>';
    table += '<th>Ok</th><th>Warning</th><th>Critical</th><th>Unknown</th><th>Pending</th></tr><tr>';
    table += '<td class='+(item.ok ? 'OK' : 'miniEmpty')+'>'+item.ok+'</td>';
    table += '<td class='+(item.warning ? 'WARNING' : 'miniEmpty')+'>'+item.warning+'</td>';
    table += '<td class='+(item.critical ? 'CRITICAL' : 'miniEmpty')+'>'+item.critical+'</td>';
    table += '<td class='+(item.unknown ? 'UNKNOWN' : 'miniEmpty')+'>'+item.unknown+'</td>';
    table += '<td class='+(item.pending ? 'PENDING' : 'miniEmpty')+'>'+item.pending+'</td>';
    table += '</tr></table>';
    return(table);
}

/* Hostgroup Status Icon */
Ext.define('TP.HostgroupStatusIcon', {
    extend: 'TP.IconWidget',

    iconType: 'hostgroup',
    iconName: 'Hostgroupname',
    initComponent: function() {
        var panel = this;
        this.callParent();
        this.xdata.general.incl_hst       = true;
        this.xdata.general.incl_svc       = true;
        this.xdata.general.incl_downtimes = true;
        this.xdata.general.incl_ack       = true;
    },

    getGeneralItems: function() {
        var panel = this;
        return([
            TP.objectSearchItem(panel, 'hostgroup', 'Hostgroupname'),
            {
                fieldLabel: 'Include Hosts',
                xtype:      'checkbox',
                name:       'incl_hst'
            }, {
                fieldLabel: 'Include Services',
                xtype:      'checkbox',
                name:       'incl_svc'
            }, {
                fieldLabel: 'Include Downtimes',
                xtype:      'checkbox',
                name:       'incl_downtimes'
            }, {
                fieldLabel: 'Include Acknowledged',
                xtype:      'checkbox',
                name:       'incl_ack'
            }
        ]);
    },
    refreshHandler: function(newStatus) {
        // calculate summarized status
        if(this.hostgroup) {
            var s;
                 if(this.xdata.general.incl_svc && this.hostgroup.services.unknown > 0)                                                 { s = 3; }
            else if(this.xdata.general.incl_svc && this.xdata.general.incl_ack && this.hostgroup.services.ack_unknown > 0)              { s = 3; }
            else if(this.xdata.general.incl_svc && this.xdata.general.incl_downtimes && this.hostgroup.services.downtimes_unknown > 0)  { s = 3; }
            else if(this.xdata.general.incl_hst && this.hostgroup.hosts.unreachable > 0)                                                { s = 2; }
            else if(this.xdata.general.incl_hst && this.hostgroup.hosts.down        > 0)                                                { s = 2; }
            else if(this.xdata.general.incl_ack && this.hostgroup.hosts.ack_unreachable > 0)                                            { s = 2; }
            else if(this.xdata.general.incl_ack && this.hostgroup.hosts.ack_down        > 0)                                            { s = 2; }
            else if(this.xdata.general.incl_hst && this.xdata.general.incl_downtimes && this.hostgroup.hosts.downtime_down        > 0)  { s = 2; }
            else if(this.xdata.general.incl_hst && this.xdata.general.incl_downtimes && this.hostgroup.hosts.downtime_unreachable > 0)  { s = 2; }
            else if(this.xdata.general.incl_svc && this.hostgroup.services.critical > 0)                                                { s = 2; }
            else if(this.xdata.general.incl_svc && this.xdata.general.incl_ack && this.hostgroup.services.ack_critical > 0)             { s = 2; }
            else if(this.xdata.general.incl_svc && this.xdata.general.incl_downtimes && this.hostgroup.services.downtimes_critical > 0) { s = 2; }
            else if(this.xdata.general.incl_svc && this.hostgroup.services.warning > 0)                                                 { s = 1; }
            else if(this.xdata.general.incl_svc && this.xdata.general.incl_ack && this.hostgroup.services.ack_warning > 0)              { s = 1; }
            else if(this.xdata.general.incl_svc && this.xdata.general.incl_downtimes && this.hostgroup.services.downtimes_warning > 0)  { s = 1; }
            else                                                                                                                        { s = 0; }
            newStatus = s;
        }
        this.callParent([newStatus]);
    },
    getName: function() {
        return(this.xdata.general.hostgroup);
    },
    getDetails: function() {
        var details = [];
        if(!this.hostgroup) {
            return([['Status', 'No status information available']]);
        }
        var statename = TP.text_service_status(this.xdata.state);
        details.push([ 'Summarized Status', '<div class="extinfostate '+statename.toUpperCase()+'">'+statename.toUpperCase()+'<\/div>']);
        details.push([ 'Hosts', TP.get_summarized_hoststatus(this.hostgroup.hosts)]);
        if(this.xdata.general.incl_svc) {
            details.push([ 'Services', TP.get_summarized_servicestatus(this.hostgroup.services)]);
        }
        return(details);
    }
});

/* Service Status Icon */
Ext.define('TP.ServiceStatusIcon', {
    extend: 'TP.IconWidget',

    iconType: 'service',
    iconName: 'Servicename',
    initComponent: function() {
        var panel = this;
        this.callParent();
        this.xdata.general.incl_downtimes = true;
        this.xdata.general.incl_ack       = true;
    },

    getGeneralItems: function() {
        var panel = this;
        return([
            TP.objectSearchItem(panel, 'host', 'Hostname'),
            TP.objectSearchItem(panel, 'service', 'Servicename'),
            {
                fieldLabel: 'Include Downtimes',
                xtype:      'checkbox',
                name:       'incl_downtimes'
            }, {
                fieldLabel: 'Include Acknowledged',
                xtype:      'checkbox',
                name:       'incl_ack'
            }
        ]);
    },
    getName: function() {
        return(this.xdata.general.host + ' - ' + this.xdata.general.service);
    },
    getDetails: function() {
        var details = [];
        if(!this.service) {
            return([['Status', 'No status information available']]);
        }
        var statename = TP.text_service_status(this.xdata.state);
        details.push([ 'Current Status', '<div class="extinfostate '+statename.toUpperCase()+'">'+statename.toUpperCase()+'<\/div> (for ' + TP.render_duration('', '', {data:this.service})+')'+(this.service.acknowledged?' (<img src="[% url_prefix %]plugins/panorama/images/btn_ack.png" style="vertical-align:text-bottom"> acknowledged)':'')]);
        details.push([ 'Status Information', this.service.plugin_output]);
        details.push([ 'Last Check', this.service.last_check ? TP.date_format(this.service.last_check) : 'never']);
        details.push([ 'Last Notification', (this.service.last_notification == 0 ? 'N/A' : TP.date_format(this.service.last_notification)) + ' (notification '+this.service.current_notification_number+')']);
        return(details);
    }
});

/* Servicegroup Status Icon */
Ext.define('TP.ServicegroupStatusIcon', {
    extend: 'TP.IconWidget',

    iconType: 'servicegroup',
    iconName: 'Servicegroupname',
    initComponent: function() {
        var panel = this;
        this.callParent();
        this.xdata.general.incl_downtimes = true;
        this.xdata.general.incl_ack       = true;
    },

    getGeneralItems: function() {
        var panel = this;
        return([
            TP.objectSearchItem(panel, 'servicegroup', 'Servicegroupname'),
            {
                fieldLabel: 'Include Downtimes',
                xtype:      'checkbox',
                name:       'incl_downtimes'
            }, {
                fieldLabel: 'Include Acknowledged',
                xtype:      'checkbox',
                name:       'incl_ack'
            }
        ]);
    },
    refreshHandler: function(newStatus) {
        // calculate summarized status
        if(this.servicegroup) {
            var s;
                 if(this.servicegroup.services.unknown > 0)                                                 { s = 3; }
            else if(this.xdata.general.incl_ack && this.servicegroup.services.ack_unknown > 0)              { s = 3; }
            else if(this.xdata.general.incl_downtimes && this.servicegroup.services.downtimes_unknown > 0)  { s = 3; }
            else if(this.servicegroup.services.critical > 0)                                                { s = 2; }
            else if(this.xdata.general.incl_ack && this.servicegroup.services.ack_critical > 0)             { s = 2; }
            else if(this.xdata.general.incl_downtimes && this.servicegroup.services.downtimes_critical > 0) { s = 2; }
            else if(this.servicegroup.services.warning > 0)                                                 { s = 1; }
            else if(this.xdata.general.incl_ack && this.servicegroup.services.ack_warning > 0)              { s = 1; }
            else if(this.xdata.general.incl_downtimes && this.servicegroup.services.downtimes_warning > 0)  { s = 1; }
            else                                                                                            { s = 0; }
            newStatus = s;
        }
        this.callParent([newStatus]);
    },
    getName: function() {
        return(this.xdata.general.servicegroup);
    },
    getDetails: function() {
        var details = [];
        if(!this.servicegroup) {
            return([['Status', 'No status information available']]);
        }
        var statename = TP.text_service_status(this.xdata.state);
        details.push([ 'Summarized Status', '<div class="extinfostate '+statename.toUpperCase()+'">'+statename.toUpperCase()+'<\/div>']);
        details.push([ 'Services', TP.get_summarized_servicestatus(this.servicegroup.services)]);
        return(details);
    }
});

/* Custom Filter Icon */
Ext.define('TP.FilterStatusIcon', {
    extend: 'TP.IconWidget',

    iconType: 'filtered',
    initComponent: function() {
        var panel = this;
        this.callParent();
        this.xdata.general.name           = '';
        this.xdata.general.incl_hst       = true;
        this.xdata.general.incl_svc       = true;
        this.xdata.general.incl_downtimes = true;
        this.xdata.general.incl_ack       = true;
    },

    getGeneralItems: function() {
        var panel = this;
        return([{
                fieldLabel: 'Name',
                xtype:      'textfield',
                name:       'name',
                value:      ''
            },
            new TP.formFilter({
                fieldLabel: 'Filter',
                name:       'filter',
                ftype:      'service',
                labelWidth: 132,
                panel:      panel
            }), {
                fieldLabel: 'Include Hosts',
                xtype:      'checkbox',
                name:       'incl_hst'
            }, {
                fieldLabel: 'Include Services',
                xtype:      'checkbox',
                name:       'incl_svc'
            }, {
                fieldLabel: 'Include Downtimes',
                xtype:      'checkbox',
                name:       'incl_downtimes'
            }, {
                fieldLabel: 'Include Acknowledged',
                xtype:      'checkbox',
                name:       'incl_ack'
            }
        ]);
    },
    refreshHandler: function(newStatus) {
        // calculate summarized status
        if(this.results) {
            var s;
                 if(this.xdata.general.incl_svc && this.results.services.unknown > 0)                                                 { s = 3; }
            else if(this.xdata.general.incl_svc && this.xdata.general.incl_ack && this.results.services.ack_unknown > 0)              { s = 3; }
            else if(this.xdata.general.incl_svc && this.xdata.general.incl_downtimes && this.results.services.downtimes_unknown > 0)  { s = 3; }
            else if(this.xdata.general.incl_hst && this.results.hosts.unreachable > 0)                                                { s = 2; }
            else if(this.xdata.general.incl_hst && this.results.hosts.down        > 0)                                                { s = 2; }
            else if(this.xdata.general.incl_hst && this.xdata.general.incl_ack && this.results.hosts.ack_unreachable > 0)             { s = 2; }
            else if(this.xdata.general.incl_hst && this.xdata.general.incl_ack && this.results.hosts.ack_down        > 0)             { s = 2; }
            else if(this.xdata.general.incl_hst && this.xdata.general.incl_downtimes && this.results.hosts.downtime_down        > 0)  { s = 2; }
            else if(this.xdata.general.incl_hst && this.xdata.general.incl_downtimes && this.results.hosts.downtime_unreachable > 0)  { s = 2; }
            else if(this.xdata.general.incl_svc && this.results.services.critical > 0)                                                { s = 2; }
            else if(this.xdata.general.incl_svc && this.xdata.general.incl_ack && this.results.services.ack_critical > 0)             { s = 2; }
            else if(this.xdata.general.incl_svc && this.xdata.general.incl_downtimes && this.results.services.downtimes_critical > 0) { s = 2; }
            else if(this.xdata.general.incl_svc && this.results.services.warning > 0)                                                 { s = 1; }
            else if(this.xdata.general.incl_svc && this.xdata.general.incl_ack && this.results.services.ack_warning > 0)              { s = 1; }
            else if(this.xdata.general.incl_svc && this.xdata.general.incl_downtimes && this.results.services.downtimes_warning > 0)  { s = 1; }
            else                                                                                                                      { s = 0; }
            newStatus = s;
        }
        this.callParent([newStatus]);
    },
    getName: function() {
        return(this.xdata.general.name);
    },
    getDetails: function() {
        var details = [];
        if(!this.results) {
            return([['Status', 'No status information available']]);
        }
        var statename;
        if(this.xdata.general.incl_svc == false) {
            statename = TP.text_host_status(this.xdata.state);
        } else {
            statename = TP.text_service_status(this.xdata.state);
        }
        details.push([ 'Summarized Status', '<div class="extinfostate '+statename.toUpperCase()+'">'+statename.toUpperCase()+'<\/div>']);
        if(this.xdata.general.incl_hst) {
            details.push([ 'Hosts', TP.get_summarized_hoststatus(this.results.hosts)]);
        }
        if(this.xdata.general.incl_svc) {
            details.push([ 'Services', TP.get_summarized_servicestatus(this.results.services)]);
        }
        return(details);
    }
});

/* Sitestatus Icon */
Ext.define('TP.SiteStatusIcon', {
    extend: 'TP.IconWidget',

    iconType: 'site',
    iconName: 'Sitename',
    initComponent: function() {
        var panel = this;
        this.callParent();
    },
    getGeneralItems: function() {
        var panel = this;
        return([
            TP.objectSearchItem(panel, 'site', 'Sitename')
        ]);
    },
    refreshHandler: function(newStatus) {
        // calculate site status
        if(this.site) {
                 if(this.site.running == 1) { newStatus = 0; }
            else if(this.site.state   == 0) { newStatus = 0; }
            else                            { newStatus = 2; }
        } else if(newStatus == undefined) {
            newStatus = this.state;
        }
        this.callParent([newStatus]);
    },
    getName: function() {
        return(this.xdata.general.site);
    },
    getDetails: function() {
        var details = [];
        if(!this.site) {
            return([['Status', 'No status information available']]);
        }
        var statename = this.xdata.state == 0 ? 'Ok' : 'Down';
        details.push([ 'Status', '<div class="extinfostate '+statename.toUpperCase()+'">'+statename.toUpperCase()+'<\/div>']);
        if(this.xdata.state == 0) {
            details.push([ 'Details', "Operating normal"]);
        } else {
            details.push([ 'Details', this.site.last_error]);
            details.push([ 'Address', this.site.addr]);
        }
        return(details);
    }
});

/* delay link opening to allow double click menu */
TP.iconClickHandler = function(id) {
    if(Ext.getCmp(id).passClick) { return true; }
    window.clearTimeout(TP.timeouts['click'+id]);
    TP.timeouts['click'+id] = window.setTimeout(function() {
        TP.iconClickHandlerDo(id);
    }, 500);
    return false;
}
/* actually open the clicked link */
TP.iconClickHandlerDo = function(id) {
    var panel = Ext.getCmp(id);
    if(!panel || !panel.xdata || !panel.xdata.link || !panel.xdata.link.link) {
        return;
    }
    var link   = panel.xdata.link.link;
    var newTab = panel.xdata.link.newtab;
    var matches = link.match(/dashboard:\/\/(\d+)$/);
    if(matches && matches[1]) {
        // is that tab already open?
        var tabpan = Ext.getCmp('tabpan');
        var tab_id = "tabpan-tab_"+matches[1];
        var tab    = Ext.getCmp(tab_id);
        if(tab) {
            tabpan.setActiveTab(tab);
        } else {
            var replace;
            if(!newTab) {
                replace = tabpan.getActiveTab().id;
            }
            TP.add_pantab(tab_id, replace);
        }
    } else {
        panel.el.dom.href=link;
        panel.passClick = true;
        if(newTab) {
            panel.el.dom.target='_blank';
        }
        panel.el.dom.click();
        window.setTimeout(function() {
            panel.passClick = false;
        }, 300);
    }
};
