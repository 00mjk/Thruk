Ext.define('TP.SmallWidget', {
    constructor: function(config) {
        var me = this;
        Ext.apply(me, config);

        this.shadow   = false;
        this.floating = true;
        this.stateful = true;
        this.stateId  = this.id;
        if(this.xdata == undefined) {
            this.xdata = {};
        } else {
            this.xdata = TP.clone(this.xdata);
        }
        var tab     = Ext.getCmp(this.panel_id);
        this.locked = tab.xdata.locked;
        [% IF readonly %]
        this.locked = true;
        [% END %]
        this.redrawOnly = false;
        this.animations = 0;

        this.xdata.cls      = this.$className;
        this.xdata.state    = 4;
        this.xdata.general  = {};
        this.xdata.layout   = { rotation:     0 };
        this.xdata.link     = {};
        this.xdata.label    = { fontfamily:  '',
                                fontsize:     14,
                                fontcolor:   '#000000',
                                position:    'below',
                                orientation: 'horizontal',
                                offsetx:      0,
                                offsety:      0,
                                bgcolor:     '',
                                fontitalic:  '',
                                fontbold:    ''
                            };
        if(this.xdata.general[this.iconType] == undefined) { this.xdata.general[this.iconType] = '' };
        this.autoEl = {
            tag:     'a',
            href:    '#',
            target:  '',
            onclick: "return(TP.iconClickHandler('"+this.id+"'));"
        };

        if(!this.locked) {
            this.stateEvents = ['reconfigure', 'afterlayout', 'move'];
            this.draggable   = true;
        }

        this.getState = function() {
            var state      = {
                xdata: this.xdata
            };
            return state;
        };
        this.origApplyState = this.applyState;
        this.applyState = function(state) {
            this.origApplyState(state);
            if(state) {
                this.applyXdata(state.xdata);
            }
        };
    },
    listeners: {
        afterrender: function(This, eOpts) {
            [% UNLESS readonly %]
            This.addClickEventhandler(This.el);

            if(!this.locked) {
                var pos = this.getPosition();
                this.xdata.layout.x = pos[0];
                this.xdata.layout.y = pos[1];
                if(this.xdata.general[this.iconType] == '' && this.firstRun != false) {
                    this.firstRun = true;
                    TP.suppressIconTip = true;
                    TP.timeouts['timeout_' + this.id + '_show_settings'] = window.setTimeout(function() {
                        // show dialog delayed, so the panel has a position already
                        TP.iconShowEditDialog(This);
                    }, 10);
                }
            }
            [% END %]
            This.applyRotation(This.xdata.layout.rotation);
        },
        show: function( This, eOpts ) {
            This.addDDListener(This);
            /* update label */
            this.setIconLabel();
            if(this.labelEl) { this.labelEl.show(); }
        },
        hide: function(This, eOpts) {
            if(this.labelEl) { this.labelEl.hide(); }
        },
        destroy: function( This, eOpts ) {
            if(!this.redrawOnly) {
                /* remove window from panels window ids */
                TP.removeWindowFromPanels(this.id);
                /* clear state information */
                cp.clear(this.id);
                if(this.labelEl) { this.labelEl.destroy(); }
            }
        },
        move: function(This, x, y, eOpts) {
            var pos = This.getPosition();
            if(x != undefined) { x = Math.floor(x); } else { x = pos[0]; }
            if(y != undefined) { y = Math.floor(y); } else { y = pos[1]; }
            // update settings window
            if(TP.iconSettingsWindow) {
                TP.iconSettingsWindow.items.getAt(0).items.getAt(1).down('form').getForm().setValues({x:x, y:y});
            }
            /* update label */
            this.setIconLabel();
            if(This.stateful) {
                this.xdata.layout.x = Math.floor(x);
                this.xdata.layout.y = Math.floor(y);
            }
        },
        resize: function(This, width, height, oldWidth, oldHeight, eOpts) {
            /* update label */
            this.setIconLabel();
        }
    },
    applyXdata: function(xdata) {
        if(xdata == undefined) { xdata = this.xdata; }

        /* restore position */
        if(xdata.layout) {
            this.setPosition(Number(xdata.layout.x), Number(xdata.layout.y));
            this.applyRotation(Number(xdata.layout.rotation));
        }

        /* set label */
        if(xdata.label) {
            this.setIconLabel(xdata.label);
        }

        /* recalculate state */
        this.refreshHandler();

        /* add link */
        if(xdata.link && xdata.link.link) {
            this.addCls('clickable');
            this.removeCls('notclickable');
            if(this.el) { this.el.dom.href=xdata.link.link; }
            this.autoEl.href=xdata.link.link;
            if(this.labelEl && this.labelEl.el) {
                this.labelEl.el.dom.href=xdata.link.link;
                this.labelEl.removeCls('notclickable');
                this.labelEl.addCls('clickable');
            }
        } else {
            if(this.el) {
                this.removeCls('clickable');
                this.addCls('notclickable');
            }
            if(this.el) { this.el.dom.href='#'; }
            this.autoEl.href='#';
            if(this.labelEl && this.labelEl.el) {
                this.labelEl.el.dom.href='#';
                this.labelEl.removeCls('clickable');
                this.labelEl.addCls('notclickable');
            }
        }
    },
    /* change size and position animated */
    applyAnimated: function(animated) {
        var win = this;
        win.animations++;
        win.stateful = false;
        var delay = (animated.duration ? animated.duration : 250) + 250;
        window.setTimeout(Ext.bind(function() {
            win.animations--;
            if(win.animations == 0) { win.stateful = true; }
        }, win, []), delay);

        layout = this.xdata.layout;
        animated.to = {x:layout.x, y:layout.y};
        this.animate(animated);
    },
    /* rotates this thing */
    applyRotation: function(value) {
        if(value == undefined) { return; }
        value = value*-1;
        var el = this.el;
        if(this.rotateEl) { el = this.rotateEl; }
        if(!el || !el.dom) { return; }
        el.setStyle("-webkit-transform", "rotate("+value+"deg)");
        el.setStyle("-moz-transform", "rotate("+value+"deg)");
        el.setStyle("-o-transform", "rotate("+value+"deg)");
        el.setStyle("-ms-transform", "rotate("+value+"deg)");
    },
    /* enable / disable editing of this panlet */
    setLock: function(val) {
        var tab = Ext.getCmp(this.panel_id);
        if(this.locked != val) {
            this.saveState();
            this.redrawOnly = true;
            this.destroy();
            TP.add_panlet({id:this.id, skip_state:true, tb:tab, autoshow:true}, false);
        }
    },
    setIconLabel: function(cfg) {
        if(cfg == undefined)          { cfg = this.xdata.label; }
        if(cfg == undefined)          { return; }
        if(!this.el || !this.el.dom)  { return; }
        if(!this.el.dom.style.zIndex) { return; }
        if(!cfg.labeltext) {
            if(this.labelEl) { this.labelEl.destroy(); this.labelEl = undefined; }
            return;
        }
        if(!this.labelEl) {
            var panel = this;
            this.labelEl = Ext.create('Ext.Component', {
                'html':     ' ',
                draggable:  true,
                autoRender: true,
                autoShow:   true,
                shadow:     false,
                cls:        (panel.xdata.link.link ? '' : 'not') +'clickable iconlabel', // defaults to text cursor otherwise
                autoEl: {
                    tag:     'a',
                    href:    panel.xdata.link.link,
                    target:  '',
                    onclick: "return(TP.iconClickHandler('"+panel.id+"'));"
                },
                listeners: {
                    /* move parent element according to our drag / drop */
                    move: function(This, x, y, eOpts) {
                        var diffX = 0, diffY = 0;
                        if(x != undefined && This.oldX != undefined) { diffX = x - This.oldX; }
                        if(y != undefined && This.oldY != undefined) { diffY = y - This.oldY; }
                        if(x != undefined) { This.oldX = x; }
                        if(y != undefined) { This.oldY = y; }
                        if(diffX != 0 || diffY != 0) {
                            var pos = panel.getPosition();
                            panel.setPosition(pos[0]+diffX, pos[1]+diffY);
                            // update settings window
                            if(TP.iconSettingsWindow) {
                                TP.iconSettingsWindow.items.getAt(0).items.getAt(1).down('form').getForm().setValues({x:pos[0]+diffX, y:pos[1]+diffY});
                            }
                        }
                    },
                    afterrender: function(This, eOpts) {
                        panel.addClickEventhandler(This.el);
                    },
                    show: function( This, eOpts ) {
                        panel.addDDListener(This);
                    }
                }
            });
            if(panel.rotateLabel) {
                panel.rotateEl = panel.labelEl.el;
            }
            panel.applyRotation(panel.xdata.layout.rotation);
        }
        var el = this.labelEl.el.dom;
        el.style.zIndex       = Number(this.el.dom.style.zIndex)+1; /* keep above icon */
        this.labelEl.update(cfg.labeltext);
        el.style.color        = cfg.fontcolor;
        el.style.fontFamily   = cfg.fontfamily;
        el.style.background   = cfg.bgcolor;
        el.style.fontWeight   = cfg.fontbold   ? 'bold'   : 'normal';
        el.style.fontStyle    = cfg.fontitalic ? 'italic' : 'normal';
        el.style.paddingLeft  = "3px";
        el.style.paddingRight = "3px";
        if(cfg.orientation == 'vertical') { this.labelEl.addCls('vertical');    }
        else                              { this.labelEl.removeCls('vertical'); }

        var left          = TP.extract_number_with_unit({ value: this.el.dom.style.left, unit:'px',  floor: true, defaultValue: 100 });
        var top           = TP.extract_number_with_unit({ value: this.el.dom.style.top,  unit:'px',  floor: true, defaultValue: 100 });
        var offsetx       = TP.extract_number_with_unit({ value: cfg.offsetx,            unit:' px', floor: true, defaultValue:   0 });
        var offsety       = TP.extract_number_with_unit({ value: cfg.offsety,            unit:' px', floor: true, defaultValue:   0 });
        var fontsize      = TP.extract_number_with_unit({ value: cfg.fontsize,           unit:' px', floor: true, defaultValue:  14 });
        var elWidth       = TP.extract_number_with_unit({ value: this.width,             unit:'',    floor: true, defaultValue:   0 });
        var elHeight      = TP.extract_number_with_unit({ value: this.height,            unit:'',    floor: true, defaultValue:   0 });
        var bordersize    = TP.extract_number_with_unit({ value: cfg.bordersize,         unit:' px', floor: true, defaultValue:   0 });

        if(cfg.bordercolor && bordersize > 0) {
            el.style.border = bordersize+"px solid "+cfg.bordercolor;
        } else {
            el.style.border = "";
        }

        el.style.fontSize = fontsize+'px';
        var size          = this.labelEl.getSize();
        if(size.width == 0) { return; }

        if(cfg.position == 'above') {
            top = top - offsetx - size.height;
            if(cfg.orientation == 'horizontal') {
                left = left + (elWidth / 2) - (size.width / 2) + 2;
            }
            left = left - offsety;
        }
        if(cfg.position == 'below') {
            top = top + offsetx + elHeight;
            if(cfg.orientation == 'horizontal') {
                left = left + (elWidth / 2) - (size.width / 2) + 2;
            }
            left = left - offsety;
        }
        if(cfg.position == 'right') {
            left = left + offsetx + elWidth + 2;
            if(cfg.orientation == 'horizontal') {
                top  = top + elHeight/2 - size.height/2;
            }
            top = top - offsety;
        }
        if(cfg.position == 'left') {
            left = left - offsetx - size.width - 2;
            if(cfg.orientation == 'horizontal') {
                top  = top + elHeight/2 - size.height/2;
            }
            top = top - offsety;
        }
        el.style.left = left+"px";
        el.style.top  = top+"px";
        this.labelEl.oldX = left;
        this.labelEl.oldY = top;
    },
    /* add dbl click and context menu events */
    addClickEventhandler: function(el) {
        var This = this;
        /* open edit box on double or right click */
        el.on("dblclick", function(e) {
            window.clearTimeout(TP.timeouts['click'+This.id]);
            if(!This.locked) {
                TP.iconShowEditDialog(This);
            }
        });

        /* right click context menu on icon widgets */
        el.on("contextmenu", function(e) {
            e.preventDefault();
            Ext.create('Ext.menu.Menu', {
                margin: '0 0 10 0',
                items: [{
                    text:   'Refresh',
                    icon:   '[% url_prefix %]plugins/panorama/images/arrow_refresh.png',
                    handler: function() { TP.updateAllIcons(Ext.getCmp(This.panel_id), This.id) },
                    hidden:  This.xdata.state == undefined ? true : false
                }, {
                    text:       'Show Details',
                    icon:       '[% url_prefix %]plugins/panorama/images/application_view_columns.png',
                    href:       'status.cgi',
                    hrefTarget: '_blank',
                    listeners: {
                        afterrender: function(btn, eOpts) { btn.el.dom.children[0].href = TP.getIconDetailsLink(This); }
                    },
                    hidden:  This.xdata.state == undefined ? true : false
                }, {
                    text:   'Settings',
                    icon:   '[% url_prefix %]plugins/panorama/images/cog.png',
                    handler: function() { TP.iconShowEditDialog(This) },
                    disabled: This.locked
                }, '-', {
                    text:   'Copy',
                    icon:   '[% url_prefix %]plugins/panorama/images/page_copy.png',
                    handler: function() { TP.clipboard = {type:This.xdata.cls, state:TP.clone_panel_config(This)} }
                }, {
                    text:   'Paste',
                    icon:   '[% url_prefix %]plugins/panorama/images/page_paste.png',
                    handler: function() { TP.add_panlet_delayed(TP.clipboard, -8, -8) },
                    disabled: (This.locked || TP.clipboard == undefined)
                }, {
                    text:   'Clone',
                    icon:   '[% url_prefix %]plugins/panorama/images/page_lightning.png',
                    handler: function() { TP.add_panlet_delayed({type:This.xdata.cls, state:TP.clone_panel_config(This)}, -8, -8) },
                    disabled: This.locked
                }, '-', {
                    text:   'Remove',
                    icon:   '[% url_prefix %]plugins/panorama/images/delete.png',
                    disabled: This.locked,
                    handler: function(me, eOpts) {
                        var menu = me.parentMenu;
                        var i = menu.items.findIndexBy(function(e) { if(e.text == 'Remove') {return true;} });
                        menu.remove(i);
                        menu.add({
                            xtype: 'panel',
                            border: false,
                            bodyStyle: 'background: #F0F0F0;',
                            items: [{
                                xtype:  'label',
                                text:   'Remove? ',
                                style:  'top: 3px; position: relative; color: red; font-weight: bold;'
                            },{
                                xtype:  'button',
                                text:   'No',
                                width:  30,
                                handler: function() { menu.destroy(); }
                            }, {
                                xtype: 'button',
                                text:  'Yes',
                                width:  30,
                                handler: function() { This.destroy(); menu.destroy(); }
                            }]
                        });
                        menu.move(menu.items.length, i);
                    }
                }],
                listeners: {
                    beforehide: function(menu, eOpts) { menu.destroy(); }
                }
            }).showBy(This);
        });
    },
    addDDListener: function(el) {
        var panel = this;
        if(el.dd && !el.dd_listener_added) {
            el.dd.addListener('dragstart', function(This, eOpts) {
                window.clearTimeout(TP.timeouts['click'+panel.id]);
                TP.suppressIconTip = true;
            });
            el.dd.addListener('dragend', function(This, eOpts) {
                /* prevents opening link after draging */
                window.setTimeout(function() {
                    window.clearTimeout(TP.timeouts['click'+panel.id]);
                }, 100);
                TP.suppressIconTip = false;
                panel.setIconLabel();
            });
            el.dd_listener_added = true;
        }
    }
});

Ext.define('TP.IconWidget', {
    extend: 'Ext.draw.Component',
    mixins: {
        smallWidget: 'TP.SmallWidget'
    },

    viewBox:   false,
    cls:      'iconWidget',
    floating:  true,
    width:     22,
    height:    22,

    constructor: function (config) {
        this.mixins.smallWidget.constructor.call(this, config);
        this.callParent();
    },
    initComponent: function() {
        var panel = this;
        this.callParent();
        this.xdata.layout.iconset = '';
        this.addListener('afterrender', function(This, eOpts) {
            this.el.down('image').on("load", function (evt, ele, opts) {
                This.fixSize();
            });
        });
    },
    items: [{
        type:      'image',
        src:        Ext.BLANK_IMAGE_URL,
        width:      16,
        height:     16,
        x:          0,
        y:          0,
        group:     'img',
        rotation: { degrees: 0 }
    }],
    applyXdata: function(xdata) {
        if(xdata == undefined) { xdata = this.xdata; }
        this.mixins.smallWidget.applyXdata.call(this, xdata);
        if(xdata.nsize && xdata.size) {
            this.items[0].x      = (xdata.size - xdata.nsize[0]) / 2;
            this.items[0].y      = (xdata.size - xdata.nsize[1]) / 2;
            var size = Math.ceil(Math.sqrt(Math.pow(xdata.nsize[0], 2) + Math.pow(xdata.nsize[1], 2)));
            this.setSize(size, size);
            this.items[0].width  = xdata.nsize[0];
            this.items[0].height = xdata.nsize[1];
            if(xdata.layout.rotation) {
                this.items[0].rotation = { degrees: -1*xdata.layout.rotation };
            }
        }
    },
    refreshHandler: function(newStatus) {
        var tab   = Ext.getCmp(this.panel_id);
        var panel = this;
        if(newStatus != undefined && panel.xdata.state != newStatus) {
            panel.xdata.state = newStatus;
            if(panel.el) {
                TP.timeouts['timeout_' + panel.id + '_flicker'] = window.setTimeout(Ext.bind(TP.flickerImg, panel, [panel.el.id, panel.id]), 200);
            }
        }
        iconset = this.xdata.layout.iconset;
        if(iconset == '' || iconset == undefined) {
            iconset = tab.xdata.defaulticonset;
        }
        var newSrc;
        if(this.iconType == 'host') {
            if(this.acknowledged) {
                     if(this.xdata.state == 1) { newSrc = '../usercontent/images/status/'+iconset+'/acknowledged_down.png';        }
                else if(this.xdata.state == 2) { newSrc = '../usercontent/images/status/'+iconset+'/acknowledged_unreachable.png'; }
                else                           { newSrc = '../usercontent/images/status/'+iconset+'/acknowledged_unknown.png';     }
            }
            else if(this.downtime) {
                if(     this.xdata.state == 0) { newSrc = '../usercontent/images/status/'+iconset+'/downtime_up.png';          }
                else if(this.xdata.state == 1) { newSrc = '../usercontent/images/status/'+iconset+'/downtime_down.png';        }
                else if(this.xdata.state == 2) { newSrc = '../usercontent/images/status/'+iconset+'/downtime_unreachable.png'; }
                else if(this.xdata.state == 4) { newSrc = '../usercontent/images/status/'+iconset+'/downtime_pending.png';     }
                else                           { newSrc = '../usercontent/images/status/'+iconset+'/downtime_unknown.png';     }
            } else {
                if(     this.xdata.state == 0) { newSrc = '../usercontent/images/status/'+iconset+'/up.png';          }
                else if(this.xdata.state == 1) { newSrc = '../usercontent/images/status/'+iconset+'/down.png';        }
                else if(this.xdata.state == 2) { newSrc = '../usercontent/images/status/'+iconset+'/unreachable.png'; }
                else if(this.xdata.state == 4) { newSrc = '../usercontent/images/status/'+iconset+'/pending.png';     }
                else                           { newSrc = '../usercontent/images/status/'+iconset+'/unknown.png';     }
            }
        } else {
            if(this.acknowledged) {
                     if(this.xdata.state == 1) { newSrc = '../usercontent/images/status/'+iconset+'/acknowledged_warning.png';  }
                else if(this.xdata.state == 2) { newSrc = '../usercontent/images/status/'+iconset+'/acknowledged_critical.png'; }
                else                           { newSrc = '../usercontent/images/status/'+iconset+'/acknowledged_unknown.png';  }
            }
            else if(this.downtime) {
                if(     this.xdata.state == 0) { newSrc = '../usercontent/images/status/'+iconset+'/downtime_ok.png';       }
                else if(this.xdata.state == 1) { newSrc = '../usercontent/images/status/'+iconset+'/downtime_warning.png';  }
                else if(this.xdata.state == 2) { newSrc = '../usercontent/images/status/'+iconset+'/downtime_critical.png'; }
                else if(this.xdata.state == 4) { newSrc = '../usercontent/images/status/'+iconset+'/downtime_pending.png';  }
                else                           { newSrc = '../usercontent/images/status/'+iconset+'/downtime_unknown.png';  }
            } else {
                if(     this.xdata.state == 0) { newSrc = '../usercontent/images/status/'+iconset+'/ok.png';       }
                else if(this.xdata.state == 1) { newSrc = '../usercontent/images/status/'+iconset+'/warning.png';  }
                else if(this.xdata.state == 2) { newSrc = '../usercontent/images/status/'+iconset+'/critical.png'; }
                else if(this.xdata.state == 4) { newSrc = '../usercontent/images/status/'+iconset+'/pending.png';  }
                else                           { newSrc = '../usercontent/images/status/'+iconset+'/unknown.png';  }
            }
        }
        panel.src = newSrc;
        if(panel.surface && panel.surface.items.getAt(0)) {
            // already rendered
            panel.surface.items.getAt(0).setAttributes({src: newSrc}).redraw();
        } else {
            // set initial config
            panel.items[0].src = newSrc;
        }
    },
    fixSize: function() {
        var panel = this;
        if(!this.el || !this.el.down('image')) { return; }
        if(TP.imageSizes == undefined) { TP.imageSizes = {} }
        var src = this.el.down('image').dom.href.baseVal;
        if(TP.imageSizes[src] == undefined) {
            var img = Ext.create('Ext.Img', {
                src:       Ext.BLANK_IMAGE_URL,
                width:     1,
                height:    1,
                style:    "position: absolute; top: -1px;",
                floating:  true,
                listeners: {
                    afterrender: function(This, eOpts) {
                        This.setSrc(src);
                        This.el.on("load", function (evt, ele, opts) {
                            var naturalWidth  = This.el.dom.naturalWidth;
                            var naturalHeight = This.el.dom.naturalHeight;
                            TP.imageSizes[src] = [naturalWidth, naturalHeight];
                            panel.fixSize();
                            This.destroy();
                        });
                    }
                }
            }).show();
            return;
        }
        var naturalWidth  = TP.imageSizes[src][0];
        var naturalHeight = TP.imageSizes[src][1];
        if(naturalWidth > 0 && naturalHeight > 0) {
            var size = Math.ceil(Math.sqrt(Math.pow(naturalWidth, 2) + Math.pow(naturalHeight, 2)));
            this.setSize(size, size);
            this.xdata.size  = size;
            this.xdata.nsize = [naturalWidth, naturalHeight];
            panel.surface.items.getAt(0).animate({to:{translation:{x:0, y:0}}, duration: 0});
            this.setIconLabel();
        }
    },
    /* rotates this thing */
    applyRotation: function(value) {
        if(value        == undefined) { return; }
        if(this.surface == undefined) { return; }
        if(this.surface.items.getAt(0) == undefined) { return; }
        value = value*-1;
        this.surface.items.getAt(0).animate({to:{rotation:{degrees: value}}, duration: 0 });
    }
});

TP.iconSettingsWindow = undefined;
TP.suppressIconTip    = false;

TP.iconShowEditDialog = function(panel) {
    panel.stateful = false;

    // make sure only one window is open at a time
    if(TP.iconSettingsWindow != undefined) {
        TP.iconSettingsWindow.destroy();
    }

    /* General Settings Tab */
    var generalItems = panel.getGeneralItems();
    var generalTab = {
        title : 'General',
        type  : 'panel',
        hidden: generalItems != undefined ? false : true,
        items: [{
            xtype : 'panel',
            layout: 'fit',
            border: 0,
            items: [{
                    xtype:           'form',
                    bodyPadding:     2,
                    border:          0,
                    bodyStyle:       'overflow-y: auto;',
                    submitEmptyText: false,
                    defaults:      { anchor: '-12', labelWidth: 132 },
                    items:           generalItems
            }]
        }]
    };

    /* Layout Settings Tab */
    var iconsetsStore = Ext.create('Ext.data.Store', {
        fields: ['name', 'sample', 'value'],
        proxy: {
            type: 'ajax',
            url:  'panorama.cgi?task=userdata_iconsets&withempty=1',
            reader: {
                type: 'json',
                root: 'data'
            }
        },
        autoLoad: true,
        data : []
    });
    var layoutTab = {
        title: 'Layout',
        type:  'panel',
        items: [{
            xtype : 'panel',
            layout: 'fit',
            border: 0,
            items: [{
                xtype:           'form',
                bodyPadding:     2,
                border:          0,
                bodyStyle:       'overflow-y: auto;',
                submitEmptyText: false,
                defaults:      { anchor: '-12', labelWidth: 132 },
                items: [{
                    fieldLabel: 'Position',
                    xtype:      'fieldcontainer',
                    layout:     'table',
                    items: [{ xtype: 'label', text:  'x:', style: 'margin-left: 0; margin-right: 2px;' },
                            { xtype: 'numberfield', name:  'x', width: 55, value: panel.xdata.layout.x, listeners: { change: function(This) { var pos = panel.getPosition(); panel.setPosition(This.value, pos[1]); }} },
                            { xtype: 'label', text:  'y:', style: 'margin-left: 10px; margin-right: 2px;' },
                            { xtype: 'numberfield', name:  'y', width: 55, value: panel.xdata.layout.y, listeners: { change: function(This) { var pos = panel.getPosition(); panel.setPosition(pos[0], This.value); }} },
                            { xtype: 'label', text: '(use cursor keys)', style: 'margin-left: 10px;', cls: 'form-hint' }
                    ]
                }, {
                    fieldLabel:   'Rotation',
                    xtype:        'numberunit',
                    allowDecimals: false,
                    name:         'rotation',
                    unit:         '°',
                    minValue:     -360,
                    maxValue:      360,
                    step:           15,
                    value:         panel.xdata.layout.rotation,
                    listeners:   { change: function(This) { panel.applyRotation(This.value); } }
                }, {
                    fieldLabel:   'Icon Set',
                    xtype:        'combobox',
                    name:         'iconset',
                    store:         iconsetsStore,
                    value:        '',
                    emptyText:    'use dashboards default icon set',
                    displayField: 'name',
                    valueField:   'value',
                    hidden:        panel.iconType == 'text' ? true : false,
                    listConfig : {
                        getInnerTpl: function(displayField) {
                            return '<div class="x-combo-list-item"><img src="{sample}" height=16 width=16 style="vertical-align:top; margin-right: 3px;">{name}<\/div>';
                        }
                    }
                }, {
                    xtype:      'panel',
                    html:       'Place image sets in: [% usercontent_folder %]/images/status/',
                    style:      'text-align: center;',
                    bodyCls:    'form-hint',
                    padding:    '10 0 0 0',
                    border:      0,
                    hidden:     panel.iconType == 'text' ? true : false
                }]
            }]
        }]
    };

    /* Link Settings Tab */
    var linkTab = {
        title: 'Link',
        type:  'panel',
        items: [{
            xtype : 'panel',
            layout: 'fit',
            border: 0,
            items: [{
                xtype:           'form',
                bodyPadding:     2,
                border:          0,
                bodyStyle:       'overflow-y: auto;',
                submitEmptyText: false,
                defaults:      { anchor: '-12', labelWidth: 132 },
                items: [{
                    fieldLabel: 'Hyperlink',
                    xtype:      'textfield',
                    name:       'link'
                }, {
                    fieldLabel: 'Link another Dashboard',
                    xtype:      'fieldcontainer',
                    items:      [{
                        xtype:      'button',
                        text:       'Choose',
                        icon:       '[% url_prefix %]plugins/panorama/images/world.png',
                        menu:       {
                            items: [{
                                text: 'My Dashboards',
                                icon: '[% url_prefix %]plugins/panorama/images/user_suit.png',
                                menu: [{
                                    text:    'Loading...',
                                    icon:    '[% url_prefix %]plugins/panorama/images/loading-icon.gif',
                                    disabled: true
                                }]
                            }, {
                                text: 'Public Dashboards',
                                icon: '[% url_prefix %]plugins/panorama/images/world.png',
                                menu: [{
                                    text:    'Loading...',
                                    icon:    '[% url_prefix %]plugins/panorama/images/loading-icon.gif',
                                    disabled: true
                                }]
                            }],
                            listeners: {
                                afterrender: function(This, eOpts) {
                                    TP.load_dashboard_menu_items(This.items.get(0).menu, 'panorama.cgi?task=dashboard_list&list=my',     function(val) { This.up('form').getForm().setValues({link: 'dashboard://'+val.replace(/^tabpan-tab_/,'')})}, true);
                                    TP.load_dashboard_menu_items(This.items.get(1).menu, 'panorama.cgi?task=dashboard_list&list=public', function(val) { debug(val)}, true);
                                }
                            }
                        }
                    }]
                }, {
                    fieldLabel: 'New Tab',
                    xtype:      'checkbox',
                    name:       'newtab',
                    boxLabel:   '(opens links in new tab or window)'
                }]
            }]
        }]
    };

    /* Label Settings Tab */
    var labelUpdate = function() { panel.setIconLabel(settingsWindow.items.getAt(0).items.getAt(3).down('form').getForm().getValues()) };
    var labelTab = {
        title: 'Label',
        type:  'panel',
        items: [{
            xtype : 'panel',
            layout: 'fit',
            border: 0,
            items: [{
                xtype:           'form',
                bodyPadding:     2,
                border:          0,
                bodyStyle:       'overflow-y: auto;',
                submitEmptyText: false,
                defaults:      { anchor: '-12', labelWidth: 80, listeners: { change: labelUpdate } },
                items: [{
                    fieldLabel:   'Labeltext',
                    xtype:        'textfield',
                    name:         'labeltext'
                }, {
                    fieldLabel:   'Color',
                    xtype:        'colorcbo',
                    name:         'fontcolor',
                    value:        '#000000',
                    mouseover:     function(color) { var oldValue=this.getValue(); this.setValue(color); labelUpdate(); this.setRawValue(oldValue); },
                    mouseout:      function(color) { labelUpdate(); }
                }, {
                    xtype:        'fieldcontainer',
                    fieldLabel:   'Font',
                    layout:      { type: 'hbox', align: 'stretch' },
                    defaults:    { listeners: { change: labelUpdate } },
                    items:        [{
                        name:         'fontfamily',
                        xtype:        'fontcbo',
                        value:        '',
                        flex:          1,
                        editable:      false
                    }, {
                        xtype:        'numberunit',
                        allowDecimals: false,
                        name:         'fontsize',
                        width:         60,
                        unit:         'px',
                        margins:      {top: 0, right: 0, bottom: 0, left: 3}
                    }, {
                        xtype:        'hiddenfield',
                        name:         'fontitalic',
                        value:         panel.xdata.label.fontitalic
                    }, {
                        xtype:        'button',
                        enableToggle:  true,
                        name:         'fontitalic',
                        icon:         '[% url_prefix %]plugins/panorama/images/text_italic.png',
                        margins:      {top: 0, right: 0, bottom: 0, left: 3},
                        toggleHandler: function(btn, state) { settingsWindow.items.getAt(0).items.getAt(3).down('form').getForm().setValues({fontitalic: state ? '1' : '' }); },
                        listeners: {
                            afterrender: function() { if(panel.xdata.label.fontitalic) { this.toggle(); } }
                        }
                    }, {
                        xtype:        'hiddenfield',
                        name:         'fontbold',
                        value:         panel.xdata.label.fontbold
                    }, {
                        xtype:        'button',
                        enableToggle:  true,
                        name:         'fontbold',
                        icon:         '[% url_prefix %]plugins/panorama/images/text_bold.png',
                        margins:      {top: 0, right: 0, bottom: 0, left: 3},
                        toggleHandler: function(btn, state) { settingsWindow.items.getAt(0).items.getAt(3).down('form').getForm().setValues({fontbold: state ? '1' : ''}); },
                        listeners: {
                            afterrender: function() { if(panel.xdata.label.fontbold) { this.toggle(); } }
                        }
                    }]
                }, {
                    xtype:        'fieldcontainer',
                    fieldLabel:   'Position',
                    layout:      { type: 'hbox', align: 'stretch' },
                    defaults:    { listeners: { change: labelUpdate } },
                    items:        [{
                        name:         'position',
                        xtype:        'combobox',
                        store:        ['below', 'above', 'left', 'right'],
                        value:        'below',
                        flex:          1,
                        editable:      false
                    }, {
                        xtype:        'label',
                        text:         'Offset: x',
                        margins:      {top: 3, right: 2, bottom: 0, left: 7}
                    }, {
                        xtype:        'numberunit',
                        allowDecimals: false,
                        name:         'offsetx',
                        width:         60,
                        unit:         'px'
                    }, {
                        xtype:        'label',
                        text:         'y',
                        margins:      {top: 3, right: 2, bottom: 0, left: 7}
                    }, {
                        xtype:        'numberunit',
                        allowDecimals: false,
                        name:         'offsety',
                        width:         60,
                        unit:         'px'
                    }]
                }, {
                    fieldLabel:   'Orientation',
                    name:         'orientation',
                    xtype:        'combobox',
                    store:        ['horizontal', 'vertical'],
                    value:        'horizontal',
                    editable:      false
                }, {
                    fieldLabel:   'Background',
                    xtype:        'colorcbo',
                    name:         'bgcolor',
                    value:        '',
                    mouseover:     function(color) { var oldValue=this.getValue(); this.setValue(color); labelUpdate(); this.setRawValue(oldValue); },
                    mouseout:      function(color) { labelUpdate(); }
                }, {
                    xtype:        'fieldcontainer',
                    fieldLabel:   'Border',
                    layout:      { type: 'hbox', align: 'stretch' },
                    defaults:    { listeners: { change: labelUpdate } },
                    items:        [{
                        xtype:        'colorcbo',
                        name:         'bordercolor',
                        value:        '',
                        mouseover:     function(color) { var oldValue=this.getValue(); this.setValue(color); labelUpdate(); this.setRawValue(oldValue); },
                        mouseout:      function(color) { labelUpdate(); },
                        flex:          1,
                        margins:      {top: 0, right: 3, bottom: 0, left: 0}
                    }, {
                        xtype:        'numberunit',
                        allowDecimals: false,
                        name:         'bordersize',
                        width:         60,
                        unit:         'px'
                    }]
                }]
            }]
        }]
    };

    var tabPanel = new Ext.TabPanel({
        activeTab         : panel.initialSettingsTab ? panel.initialSettingsTab : 0,
        enableTabScroll   : true,
        items             : [
            generalTab,
            layoutTab,
            linkTab,
            labelTab
        ]
    });
    var settingsWindow = new Ext.Window({
        height:  300,
        width:   400,
        layout: 'fit',
        items:   tabPanel,
        title:  'Icon Settings',
        buttonAlign: 'center',
        fbar: [/* panlet setting cancel button */
               { xtype:  'button',
                 text:   'cancel',
                 handler: function(This) {
                    delete TP.iconSettingsWindow;
                    panel.stateful = true;
                    // if we cancel directly after adding a new icon, destroy it
                    if(panel.firstRun) {
                        panel.destroy();
                    }
                    settingsWindow.destroy();
                    // restore position any layout
                    panel.applyXdata();
                 }
               },
               /* panlet setting save button */
               { xtype:  'button',
                 text:   'save',
                 handler: function() {
                    panel.stateful = true;
                    panel.xdata.general = settingsWindow.items.getAt(0).items.getAt(0).down('form').getForm().getValues();
                    panel.xdata.layout  = settingsWindow.items.getAt(0).items.getAt(1).down('form').getForm().getValues();
                    panel.xdata.link    = settingsWindow.items.getAt(0).items.getAt(2).down('form').getForm().getValues();
                    panel.xdata.label   = settingsWindow.items.getAt(0).items.getAt(3).down('form').getForm().getValues();
                    panel.applyState({xdata: panel.xdata});
                    panel.saveState();
                    TP.updateAllIcons(Ext.getCmp(panel.panel_id), panel.id);
                    delete TP.iconSettingsWindow;
                    settingsWindow.destroy();
                    panel.firstRun = false;
                    panel.applyXdata();
                 }
               }
        ],
        listeners: {
            afterRender: function () {
                this.nav = Ext.create('Ext.util.KeyNav', this.el, {
                    'left':  function(e){ var pos = panel.getPosition(); panel.setPosition(pos[0]-1, pos[1]);   },
                    'right': function(e){ var pos = panel.getPosition(); panel.setPosition(pos[0]+1, pos[1]);   },
                    'up':    function(e){ var pos = panel.getPosition(); panel.setPosition(pos[0],   pos[1]-1); },
                    'down':  function(e){ var pos = panel.getPosition(); panel.setPosition(pos[0],   pos[1]+1); },
                    ignoreInputFields: true,
                    scope: panel
                });
            },
            destroy: function() {
                TP.suppressIconTip = false;
                panel.setIconLabel();
            }
        }
    }).show();

    settingsWindow.items.getAt(0).items.getAt(0).down('form').getForm().setValues(panel.xdata.general);
    settingsWindow.items.getAt(0).items.getAt(1).down('form').getForm().setValues(panel.xdata.layout);
    settingsWindow.items.getAt(0).items.getAt(2).down('form').getForm().setValues(panel.xdata.link);
    settingsWindow.items.getAt(0).items.getAt(3).down('form').getForm().setValues(panel.xdata.label);
    TP.iconSettingsWindow = settingsWindow;

    // new mouseover tips while settings are open
    TP.iconTip.hide();
    TP.suppressIconTip = true;

    // move settings window next to panel itself
    var panelPos     = panel.getPosition();
    var viewPortSize = TP.viewport.getSize();
    if(viewPortSize.width > panelPos[0] + 430) {
        panelPos[0] = panelPos[0] + 30;
    } else {
        panelPos[0] = panelPos[0] - 410;
    }
    if(panelPos[1] - 50 < 0) {
        panelPos[1] = 30;
    }
    else if(viewPortSize.height > panelPos[1] + 270) {
        panelPos[1] = panelPos[1] - 30;
    } else {
        panelPos[1] = viewPortSize.height - 330;
    }
    panel.setIconLabel();
    settingsWindow.showAt(panelPos);
    settingsWindow.toFront();
};

Ext.onReady(function() {
    TP.iconTip = Ext.create('Ext.tip.ToolTip', {
        title:    'Details:',
        itemId:   'iconTip',
        target:    Ext.getBody(),
        delegate: 'A.iconWidget', // the cell class in which the tooltip has to be triggered
        showDelay: 500,
        dismissDelay: 0,
        width:     400,
        maxWidth:  400,
        //closable:  true,  // enable for easier css debuging
        style:    'background: #E5E5E5',
        bodyStyle:'background: #E5E5E5',
        shadow:   'drop',
        html:      '',
        listeners: {
            show: function(This) {
                if(TP.suppressIconTip) {
                    This.hide();
                    return false;
                }
            }
        }
    });

    var tipRenderer = function (e, el, eOpts) {
        e.stopEvent();
        var img = Ext.getCmp(el.id);
        if(img.iconType == 'filtered') {
            TP.iconTip.setTitle(img.getName());
        } else {
            TP.iconTip.setTitle(ucfirst(img.iconType)+': '+img.getName());
        }
        var d = img.getDetails();
        var details = '<table class="iconDetails">';
        for(var x=0; x<d.length; x++) {
            details += '<tr>';
            details += '<th>'+d[x][0]+'</th>';
            details += '<td>'+d[x][1]+'</td>';
            details += '</tr>';
        }
        details += '</table>';
        TP.iconTip.update(details);
        TP.iconTip.show();
    };

    Ext.getBody().on('mouseover', function(e,t,a) {
        tipRenderer(e,t,a);
    }, null, {delegate:'A.iconWidget'});
});


/* Host Status Icon */
Ext.define('TP.HostStatusIcon', {
    extend: 'TP.IconWidget',

    iconType: 'host',
    iconName: 'Hostname',
    initComponent: function() {
        var panel = this;
        this.callParent();
        this.xdata.general.incl_downtimes = false;
        this.xdata.general.incl_ack       = false;
    },
    getGeneralItems: function() {
        var panel = this;
        return([
            TP.objectSearchItem(panel, 'host', 'Hostname'),
            {
                fieldLabel: 'Include Downtimes',
                xtype:      'checkbox',
                name:       'incl_downtimes',
                boxLabel:   '(alert during downtimes too)'
            }, {
                fieldLabel: 'Include Acknowledged',
                xtype:      'checkbox',
                name:       'incl_ack',
                boxLabel:   '(alert for acknowledged problems too)'
            }
        ]);
    },
    getName: function() {
        return(this.xdata.general.host);
    },
    getDetails: function() {
        var details = [];
        if(!this.host) {
            return([['Status', 'No status information available']]);
        }
        var statename = TP.text_host_status(this.xdata.state);
        details.push([ 'Current Status', '<div class="extinfostate '+statename.toUpperCase()+'">'+statename.toUpperCase()+'<\/div>'
                                        +' (for ' + TP.render_duration('', '', {data:this.host})+')<br>'
                                        +(this.acknowledged ?' (<img src="[% url_prefix %]plugins/panorama/images/btn_ack.png" style="vertical-align:text-bottom"> acknowledged)':'')
                                        +(this.downtime     ?' (<img src="[% url_prefix %]plugins/panorama/images/btn_downtime.png" style="vertical-align:text-bottom"> in downtime)':'')
                     ]);
        details.push([ 'Status Information', this.host.plugin_output]);
        details.push([ 'Last Check', this.host.last_check ? TP.date_format(this.host.last_check) : 'never']);
        details.push([ 'Last Notification', (this.host.last_notification == 0 ? 'N/A' : TP.date_format(this.host.last_notification)) + ' (notification '+this.host.current_notification_number+')']);
        return(details);
    },
    refreshHandler: function(newStatus) {
        this.acknowledged = false;
        this.downtime     = false;
        if(this.host) {
            if(this.host.scheduled_downtime_depth > 0) { this.downtime     = true; }
            if(this.host.acknowledged             > 0) { this.acknowledged = true; }
        }
        this.callParent([newStatus]);
    }
});

/* get summarized table for hosts */
TP.get_summarized_hoststatus = function(item) {
    var table = '<table class="ministatus"><tr>';
    table += '<th>Up</th><th>Unreachable</th><th>Down</th><th>Pending</th></tr><tr>';
    table += '<td class='+(item.up ? 'UP' : 'miniEmpty')+'>'+item.up+'</td>';
    table += '<td class='+(item.unreachable ? 'UNREACHABLE' : 'miniEmpty')+'>'+item.unreachable+'</td>';
    table += '<td class='+(item.down ? 'DOWN' : 'miniEmpty')+'>'+item.down+'</td>';
    table += '<td class='+(item.pending ? 'PENDING' : 'miniEmpty')+'>'+item.pending+'</td>';
    table += '</tr></table>';
    return(table);
}

/* get summarized table for services */
TP.get_summarized_servicestatus = function(item) {
    var table = '<table class="ministatus"><tr>';
    table += '<th>Ok</th><th>Warning</th><th>Critical</th><th>Unknown</th><th>Pending</th></tr><tr>';
    table += '<td class='+(item.ok ? 'OK' : 'miniEmpty')+'>'+item.ok+'</td>';
    table += '<td class='+(item.warning ? 'WARNING' : 'miniEmpty')+'>'+item.warning+'</td>';
    table += '<td class='+(item.critical ? 'CRITICAL' : 'miniEmpty')+'>'+item.critical+'</td>';
    table += '<td class='+(item.unknown ? 'UNKNOWN' : 'miniEmpty')+'>'+item.unknown+'</td>';
    table += '<td class='+(item.pending ? 'PENDING' : 'miniEmpty')+'>'+item.pending+'</td>';
    table += '</tr></table>';
    return(table);
}

/* returns group status */
TP.get_group_status = function(options) {
    var group          = options.group,
        incl_svc       = options.incl_svc,
        incl_hst       = options.incl_hst;
        incl_ack       = options.incl_ack;
        incl_downtimes = options.incl_downtimes;
    var s;
    var acknowledged = false;
    var downtime     = false;
         if(incl_svc && group.services.unknown > 0)                              { s = 3; }
    else if(incl_svc && incl_ack && group.services.ack_unknown > 0)              { s = 3; }
    else if(incl_svc && incl_downtimes && group.services.downtimes_unknown > 0)  { s = 3; }
    else if(incl_hst && group.hosts.unreachable > 0)                             { s = 2; }
    else if(incl_hst && group.hosts.down        > 0)                             { s = 2; }
    else if(incl_ack && group.hosts.ack_unreachable > 0)                         { s = 2; }
    else if(incl_ack && group.hosts.ack_down        > 0)                         { s = 2; }
    else if(incl_hst && incl_downtimes && group.hosts.downtime_down        > 0)  { s = 2; }
    else if(incl_hst && incl_downtimes && group.hosts.downtime_unreachable > 0)  { s = 2; }
    else if(incl_svc && group.services.critical > 0)                             { s = 2; }
    else if(incl_svc && incl_ack && group.services.ack_critical > 0)             { s = 2; }
    else if(incl_svc && incl_downtimes && group.services.downtimes_critical > 0) { s = 2; }
    else if(incl_svc && group.services.warning > 0)                              { s = 1; }
    else if(incl_svc && incl_ack && group.services.ack_warning > 0)              { s = 1; }
    else if(incl_svc && incl_downtimes && group.services.downtimes_warning > 0)  { s = 1; }
    else                                                                         { s = 0; }
    if(s == 0) {
        var a = 0;
             if(incl_svc && group.services.ack_unknown       > 0) { a = 3; acknowledged = true; }
        else if(incl_hst && group.hosts.ack_unreachable      > 0) { a = 2; acknowledged = true; }
        else if(incl_hst && group.hosts.ack_down             > 0) { a = 2; acknowledged = true; }
        else if(incl_svc && group.services.ack_critical      > 0) { a = 2; acknowledged = true; }
        else if(incl_svc && group.services.ack_warning       > 0) { a = 1; acknowledged = true; }

        var d = 0;
             if(incl_svc && group.services.downtimes_unknown > 0) { d = 3; downtime     = true; }
        else if(incl_hst && group.hosts.downtime_unreachable > 0) { d = 2; downtime     = true; }
        else if(incl_hst && group.hosts.downtime_down        > 0) { d = 2; downtime     = true; }
        else if(incl_svc && group.services.downtime_critical > 0) { d = 2; downtime     = true; }
        else if(incl_svc && group.services.downtime_warning  > 0) { d = 1; downtime     = true; }
        s = Ext.Array.max([a,s,d]);
    }
    return({state: s, downtime: downtime, acknowledged: acknowledged});
}


/* Hostgroup Status Icon */
Ext.define('TP.HostgroupStatusIcon', {
    extend: 'TP.IconWidget',

    iconType: 'hostgroup',
    iconName: 'Hostgroupname',
    initComponent: function() {
        var panel = this;
        this.callParent();
        this.xdata.general.incl_hst       = true;
        this.xdata.general.incl_svc       = true;
        this.xdata.general.incl_downtimes = false;
        this.xdata.general.incl_ack       = false;
    },

    getGeneralItems: function() {
        var panel = this;
        return([
            TP.objectSearchItem(panel, 'hostgroup', 'Hostgroupname'),
            {
                fieldLabel: 'Include Hosts',
                xtype:      'checkbox',
                name:       'incl_hst'
            }, {
                fieldLabel: 'Include Services',
                xtype:      'checkbox',
                name:       'incl_svc'
            }, {
                fieldLabel: 'Include Downtimes',
                xtype:      'checkbox',
                name:       'incl_downtimes',
                boxLabel:   '(alert during downtimes too)'
            }, {
                fieldLabel: 'Include Acknowledged',
                xtype:      'checkbox',
                name:       'incl_ack',
                boxLabel:   '(alert for acknowledged problems too)'
            }
        ]);
    },
    refreshHandler: function(newStatus) {
        // calculate summarized status
        if(this.hostgroup) {
            var res = TP.get_group_status({
                group:          this.hostgroup,
                incl_ack:       this.xdata.general.incl_ack,
                incl_downtimes: this.xdata.general.incl_downtimes,
                incl_svc:       this.xdata.general.incl_svc,
                incl_hst:       this.xdata.general.incl_hst
            });
            newStatus         = res.state;
            this.downtime     = res.downtime;
            this.acknowledged = res.acknowledged;
        }
        this.callParent([newStatus]);
    },
    getName: function() {
        return(this.xdata.general.hostgroup);
    },
    getDetails: function() {
        var details = [];
        if(!this.hostgroup) {
            return([['Status', 'No status information available']]);
        }
        var statename = TP.text_service_status(this.xdata.state);
        details.push([ 'Summarized Status', '<div class="extinfostate '+statename.toUpperCase()+'">'+statename.toUpperCase()+'<\/div>'
                                            +(this.acknowledged ?' (<img src="[% url_prefix %]plugins/panorama/images/btn_ack.png" style="vertical-align:text-bottom"> acknowledged)':'')
                                            +(this.downtime     ?' (<img src="[% url_prefix %]plugins/panorama/images/btn_downtime.png" style="vertical-align:text-bottom"> in downtime)':'')
                     ]);
        if(this.xdata.general.incl_hst) {
            details.push([ 'Hosts', TP.get_summarized_hoststatus(this.hostgroup.hosts)]);
        }
        if(this.xdata.general.incl_svc) {
            details.push([ 'Services', TP.get_summarized_servicestatus(this.hostgroup.services)]);
        }
        return(details);
    }
});

/* Service Status Icon */
Ext.define('TP.ServiceStatusIcon', {
    extend: 'TP.IconWidget',

    iconType: 'service',
    iconName: 'Servicename',
    initComponent: function() {
        var panel = this;
        this.callParent();
        this.xdata.general.incl_downtimes = false;
        this.xdata.general.incl_ack       = false;
    },

    getGeneralItems: function() {
        var panel = this;
        return([
            TP.objectSearchItem(panel, 'host', 'Hostname'),
            TP.objectSearchItem(panel, 'service', 'Servicename'),
            {
                fieldLabel: 'Include Downtimes',
                xtype:      'checkbox',
                name:       'incl_downtimes',
                boxLabel:   '(alert during downtimes too)'
            }, {
                fieldLabel: 'Include Acknowledged',
                xtype:      'checkbox',
                name:       'incl_ack',
                boxLabel:   '(alert for acknowledged problems too)'
            }
        ]);
    },
    getName: function() {
        return(this.xdata.general.host + ' - ' + this.xdata.general.service);
    },
    getDetails: function() {
        var details = [];
        if(!this.service) {
            return([['Status', 'No status information available']]);
        }
        var statename = TP.text_service_status(this.xdata.state);
        details.push([ 'Current Status', '<div class="extinfostate '+statename.toUpperCase()+'">'+statename.toUpperCase()+'<\/div>'
                                            +' (for ' + TP.render_duration('', '', {data:this.service})+')'
                                            +(this.acknowledged ?' (<img src="[% url_prefix %]plugins/panorama/images/btn_ack.png" style="vertical-align:text-bottom"> acknowledged)':'')
                                            +(this.downtime     ?' (<img src="[% url_prefix %]plugins/panorama/images/btn_downtime.png" style="vertical-align:text-bottom"> in downtime)':'')
                     ]);
        details.push([ 'Status Information', this.service.plugin_output]);
        details.push([ 'Last Check', this.service.last_check ? TP.date_format(this.service.last_check) : 'never']);
        details.push([ 'Last Notification', (this.service.last_notification == 0 ? 'N/A' : TP.date_format(this.service.last_notification)) + ' (notification '+this.service.current_notification_number+')']);
        return(details);
    },
    refreshHandler: function(newStatus) {
        this.acknowledged = false;
        this.downtime     = false;
        if(this.service) {
            if(this.service.scheduled_downtime_depth > 0) { this.downtime     = true; }
            if(this.service.acknowledged             > 0) { this.acknowledged = true; }
        }
        this.callParent([newStatus]);
    }
});

/* Servicegroup Status Icon */
Ext.define('TP.ServicegroupStatusIcon', {
    extend: 'TP.IconWidget',

    iconType: 'servicegroup',
    iconName: 'Servicegroupname',
    initComponent: function() {
        var panel = this;
        this.callParent();
        this.xdata.general.incl_downtimes = false;
        this.xdata.general.incl_ack       = false;
    },

    getGeneralItems: function() {
        var panel = this;
        return([
            TP.objectSearchItem(panel, 'servicegroup', 'Servicegroupname'),
            {
                fieldLabel: 'Include Downtimes',
                xtype:      'checkbox',
                name:       'incl_downtimes',
                boxLabel:   '(alert during downtimes too)'
            }, {
                fieldLabel: 'Include Acknowledged',
                xtype:      'checkbox',
                name:       'incl_ack',
                boxLabel:   '(alert for acknowledged problems too)'
            }
        ]);
    },
    refreshHandler: function(newStatus) {
        // calculate summarized status
        if(this.servicegroup) {
            var res = TP.get_group_status({
                group:          this.servicegroup,
                incl_ack:       this.xdata.general.incl_ack,
                incl_downtimes: this.xdata.general.incl_downtimes,
                incl_svc:       true,
                incl_hst:       false
            });
            newStatus         = res.state;
            this.downtime     = res.downtime;
            this.acknowledged = res.acknowledged;
        }
        this.callParent([newStatus]);
    },
    getName: function() {
        return(this.xdata.general.servicegroup);
    },
    getDetails: function() {
        var details = [];
        if(!this.servicegroup) {
            return([['Status', 'No status information available']]);
        }
        var statename = TP.text_service_status(this.xdata.state);
        details.push([ 'Summarized Status', '<div class="extinfostate '+statename.toUpperCase()+'">'+statename.toUpperCase()+'<\/div>'
                                            +(this.acknowledged ?' (<img src="[% url_prefix %]plugins/panorama/images/btn_ack.png" style="vertical-align:text-bottom"> acknowledged)':'')
                                            +(this.downtime     ?' (<img src="[% url_prefix %]plugins/panorama/images/btn_downtime.png" style="vertical-align:text-bottom"> in downtime)':'')
                     ]);
        details.push([ 'Services', TP.get_summarized_servicestatus(this.servicegroup.services)]);
        return(details);
    }
});

/* Custom Filter Icon */
Ext.define('TP.FilterStatusIcon', {
    extend: 'TP.IconWidget',

    iconType: 'filtered',
    initComponent: function() {
        var panel = this;
        this.callParent();
        this.xdata.general.name           = '';
        this.xdata.general.incl_hst       = true;
        this.xdata.general.incl_svc       = true;
        this.xdata.general.incl_downtimes = false;
        this.xdata.general.incl_ack       = false;
    },

    getGeneralItems: function() {
        var panel = this;
        return([{
                fieldLabel: 'Name',
                xtype:      'textfield',
                name:       'name',
                value:      ''
            },
            new TP.formFilter({
                fieldLabel: 'Filter',
                name:       'filter',
                ftype:      'service',
                labelWidth: 132,
                panel:      panel
            }), {
                fieldLabel: 'Include Hosts',
                xtype:      'checkbox',
                name:       'incl_hst'
            }, {
                fieldLabel: 'Include Services',
                xtype:      'checkbox',
                name:       'incl_svc'
            }, {
                fieldLabel: 'Include Downtimes',
                xtype:      'checkbox',
                name:       'incl_downtimes',
                boxLabel:   '(alert during downtimes too)'
            }, {
                fieldLabel: 'Include Acknowledged',
                xtype:      'checkbox',
                name:       'incl_ack',
                boxLabel:   '(alert for acknowledged problems too)'
            }
        ]);
    },
    refreshHandler: function(newStatus) {
        // calculate summarized status
        if(this.results) {
            var res = TP.get_group_status({
                group:          this.results,
                incl_ack:       this.xdata.general.incl_ack,
                incl_downtimes: this.xdata.general.incl_downtimes,
                incl_svc:       this.xdata.general.incl_svc,
                incl_hst:       this.xdata.general.incl_hst
            });
            newStatus         = res.state;
            this.downtime     = res.downtime;
            this.acknowledged = res.acknowledged;
        }
        this.callParent([newStatus]);
    },
    getName: function() {
        return(this.xdata.general.name);
    },
    getDetails: function() {
        var details = [];
        if(!this.results) {
            return([['Status', 'No status information available']]);
        }
        var statename;
        if(this.xdata.general.incl_svc == false) {
            statename = TP.text_host_status(this.xdata.state);
        } else {
            statename = TP.text_service_status(this.xdata.state);
        }
        details.push([ 'Summarized Status', '<div class="extinfostate '+statename.toUpperCase()+'">'+statename.toUpperCase()+'<\/div>'
                                            +(this.acknowledged ?' (<img src="[% url_prefix %]plugins/panorama/images/btn_ack.png" style="vertical-align:text-bottom"> acknowledged)':'')
                                            +(this.downtime     ?' (<img src="[% url_prefix %]plugins/panorama/images/btn_downtime.png" style="vertical-align:text-bottom"> in downtime)':'')
                     ]);
        if(this.xdata.general.incl_hst) {
            details.push([ 'Hosts', TP.get_summarized_hoststatus(this.results.hosts)]);
        }
        if(this.xdata.general.incl_svc) {
            details.push([ 'Services', TP.get_summarized_servicestatus(this.results.services)]);
        }
        return(details);
    }
});

/* Sitestatus Icon */
Ext.define('TP.SiteStatusIcon', {
    extend: 'TP.IconWidget',

    iconType: 'site',
    iconName: 'Sitename',
    initComponent: function() {
        var panel = this;
        this.callParent();
    },
    getGeneralItems: function() {
        var panel = this;
        return([
            TP.objectSearchItem(panel, 'site', 'Sitename')
        ]);
    },
    refreshHandler: function(newStatus) {
        // calculate site status
        if(this.site) {
                 if(this.site.running == 1) { newStatus = 0; }
            else if(this.site.state   == 0) { newStatus = 0; }
            else                            { newStatus = 2; }
        } else if(newStatus == undefined) {
            newStatus = this.state;
        }
        this.callParent([newStatus]);
    },
    getName: function() {
        return(this.xdata.general.site);
    },
    getDetails: function() {
        var details = [];
        if(!this.site) {
            return([['Status', 'No status information available']]);
        }
        var statename = this.xdata.state == 0 ? 'Ok' : 'Down';
        details.push([ 'Status', '<div class="extinfostate '+statename.toUpperCase()+'">'+statename.toUpperCase()+'<\/div>']);
        if(this.xdata.state == 0) {
            details.push([ 'Details', "Operating normal"]);
        } else {
            details.push([ 'Details', this.site.last_error]);
            details.push([ 'Address', this.site.addr]);
        }
        return(details);
    }
});

/* TextLabel Widget */
Ext.define('TP.TextLabelWidget', {
    extend: 'Ext.Component',
    mixins: {
        smallWidget: 'TP.SmallWidget'
    },
    iconType:           'text',
    html:               '',
    initialSettingsTab: 3,
    rotateLabel:        true,
    constructor: function (config) {
        this.mixins.smallWidget.constructor.call(this, config);
        this.callParent();
    },
    initComponent: function() {
        this.callParent();
        var panel = this;
        panel.xdata.label.labeltext = 'Label';
    },
    getGeneralItems: function() { return; },
    refreshHandler: function()  { return; }
});

/* delay link opening to allow double click menu */
TP.iconClickHandler = function(id) {
    if(Ext.getCmp(id).passClick) { return true; }
    window.clearTimeout(TP.timeouts['click'+id]);
    TP.timeouts['click'+id] = window.setTimeout(function() {
        TP.iconClickHandlerDo(id);
    }, 500);
    return false;
}
/* actually open the clicked link */
TP.iconClickHandlerDo = function(id) {
    var panel = Ext.getCmp(id);
    if(!panel || !panel.xdata || !panel.xdata.link || !panel.xdata.link.link) {
        return;
    }
    var link   = panel.xdata.link.link;
    var newTab = panel.xdata.link.newtab;
    var matches = link.match(/dashboard:\/\/(\d+)$/);
    if(matches && matches[1]) {
        // is that tab already open?
        var tabpan = Ext.getCmp('tabpan');
        var tab_id = "tabpan-tab_"+matches[1];
        var tab    = Ext.getCmp(tab_id);
        if(tab) {
            tabpan.setActiveTab(tab);
        } else {
            var replace;
            if(!newTab) {
                replace = tabpan.getActiveTab().id;
            }
            TP.add_pantab(tab_id, replace);
        }
    } else {
        panel.el.dom.href=link;
        panel.passClick = true;
        if(newTab) {
            panel.el.dom.target='_blank';
        }
        panel.el.dom.click();
        window.setTimeout(function() {
            panel.passClick = false;
        }, 300);
    }
};

/* return link representing the data for this icon */
TP.getIconDetailsLink = function(panel) {
    if(!panel.xdata || !panel.xdata.general) {
        return('#');
    }
    var cfg = panel.xdata.general;
    var options = {
        backends: TP.getActiveBackendsPanel(Ext.getCmp(panel.panel_id))
    };
    var base = "status.cgi";
    if(cfg.hostgroup) {
        options.hostgroup = cfg.hostgroup;
    }
    else if(cfg.service) {
        options.host    = cfg.host;
        options.service = cfg.service;
        options.type    = 2;
        base            = "extinfo.cgi";
    }
    else if(cfg.servicegroup) {
        options.servicegroup = cfg.servicegroup;
    }
    else if(cfg.host) {
        options.host = cfg.host;
    }
    else if(cfg.filter) {
        options.filter = cfg.filter;
        options.task   = 'redirect_status';
        base           = 'panorama.cgi';
    } else {
        return('#');
    }
    [%+ IF use_frames +%]
        return("[% url_prefix %]#cgi-bin/"+base+"?"+Ext.Object.toQueryString(options));
    [% ELSE %]
        return(base+"?"+Ext.Object.toQueryString(options));
    [% END %]
}
