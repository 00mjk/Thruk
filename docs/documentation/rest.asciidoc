---
layout: docs
title: REST API
breadcrumb: [ "advanced.html", "Advanced" ]
---


== REST API
{% include new_since.ad version="2.24" %}
Thruk offers a rest api to expose various aspects of Thruk itself and
livestatus information.

You can find lots of examples on the link:rest_examples.html[REST API examples page].

The api can be either accessed by http(s) at http://your_webserver/thruk/r/ or
by cli client:

------
  %> thruk r /hostgroups
------

== Versions

Right now, there is only version 1 of the rest api, so you can either use the
generic url http://your_webserver/thruk/r/ or the version specific
http://your_webserver/thruk/r/v1/.


== Authentication

=== Basic Auth

Using the web api, you can simply pass username and password as http basic
authentication like:

------
  %> curl -k https://user:password@your_webserver/thruk/r/
------

Data is collected with the permissions of the given user.

=== Cookie Auth

Cookies from the cookie authentication are valid as well if you are logged in
already and will return the results with permissions of the current user.

=== Secret Key

The web rest api accepts the secret key as http header. The secret key
is usually found in `/var/lib/thruk/secret.key` or `var/thruk/secret.key`
when using OMD.

------
  %> curl -H 'X-Thruk-Auth-Key: secretkey' \
          -H 'X-Thruk-Auth-User: thrukadmin' \
          -gk 'https://localhost/thruk/r/hosts
------

Since the secretkey gives you superadminpower. You can set the context of the
result to any user you like with the `X-Thruk-Auth-User` HTTP header.

=== Command Line

When using the cli clients, use the `-A` option like:

------
  %> thruk -A user r /
------

Having command line access gives you superadminpower as well, so you can set
the user context to any user you need with the `-A` switch.


== Parameters
You can pass parameters mostly along with `POST` and `PATCH` requests. When
using the cli tool, you can utilize the `-d` parameter with key/value pairs or
with json data. Or you can mix those options.

use key/value pairs:

------
  %> thruk r -m PATCH -d max_check_attempts=3 -d first_notification_delay=10 /hosts/localhost/config
------

use json structure:

------
  %> thruk r -m PATCH -d "{'max_check_attempts':3, 'first_notification_delay':10}" /hosts/localhost/config
------

Using curl, you can set parameters like this:

------
  %> curl -d "alias=test" -d "max_check_attempts=3" http://your_webserver/thruk/r/hosts/localhost/config
------

or you can use json data as well:

------
  %> curl --header "Content-Type: application/json" \
          --X PATCH \
          --data '{"max_check_attempts":3, "first_notification=delay":10}' \
          http://your_webserver/thruk/r/hosts/localhost/config
------

== Filtering

All pages offer filtering using query parameters:

------
  %> thruk r '/hosts?name=localhost'
------

Other operators besides equals like regular expressions are possible with the
bracket syntax:

ex.: return all hosts starting with literal `m`:

------
  %> thruk r '/hosts?name[regex]=^m'
------


ex.: list all services which are currently in a downtime:

------
  %> thruk r '/services?scheduled_downtime_depth[gte]=1'
------

Curl requires you to set the `globoff` option:

------
  %> curl -gk 'https://user:pass@localhost/thruk/r/hosts?name[regex]=^t'
------


Possible operators with their alias:

[options="header",halign="center"]
|==========================
|Operator  |Alias    |Description
| =        | eq      |Equal match
| !=       | ne      |Not equal match
| ~        | regex   |Regular expression match
| !~       | nregex  |Not regular expression match
| >        | gt      |Greater than numeric comparisson
| <        | lt      |Lower than numeric comparisson
| >=       | gte     |Greater or equal numeric comparisson. `contains` in list context
| <=       | lte     |Lower or equal numeric comparisson. `contains not` in list context
|==========================

You can use the alias name to workaround urlencoding issues.

== Sorting

All pages can sort list results by using the `sort` parameter. The sort
parameter can be used multiple times or use comma-separated lists. The order is
ascending unless prefixed with an minus.

ex.: sort by name ascending and status descending:

------
  %> thruk r /hosts?sort=name,-state
------

== Limits

All pages offer limits and offset through the `limit` and `offset` parameter.

For example show 10 hosts starting at offset 100:

------
  %> thruk r /hosts?limit=10&offset=100
------

== Columns

All pages offer setting columns with the `columns` parameter.

ex.: return name and state for all hosts:

------
  %> thruk r /hosts?columns=name,state
------


== Backends / Sites

If you have multiple sites connected to Thruk, you may want to talk only to
specific sites. There are multiple methods to set the backends for your
request. You can combine multiple sites with commas.

Use a path prefix `/sites/<sitename,...>`:

------
  %> thruk r /sites/test,prod/hosts
------

Use the `backends` option with the cli client:

------
  %> thruk r -b test,prod /hosts
------

Set the `backends` url parameter:

------
  %> thruk r /hosts?backends=test,prod
------


== Error Handling

Failed rest requests return a hash result along with a HTTP error code:

------
  %> thruk r /none
  {
    "code" : 404,
    "message" : "unknown rest path"
    "description" : "optional additional error messages"
  }
------

== Output Formats

=== JSON

JSON is the default output format.

=== CSV

CSV output is available via `/csv/` path prefix.

------
  %> thruk r /csv/hosts?columns=name,state
------

------
  %> curl -g http://localhost/thruk/r/csv/hosts/stats
------

=== XLS

Excel output is available via `/xls/` path prefix.

------
  %> thruk r /xls/hosts?columns=name,state
------

== HTTP Methods

HTTP Methods are implemented according to link:https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9[RFC2616] which
is in short:

  * GET: retrieve ressources, ex.: `GET /thruk/reports` to list all reports.
  * POST: update/create ressources or trigger actions, ex.: `POST /thruk/reports` to create a new report.
  * PUT: overwrite existing ressource, ex.: `PUT /thruk/reports/1` to update an entire existing report.
  * PATCH: replace parts of existing ressource, ex.: `PATCH /thruk/reports/1` to set specific attributes of an existing report.

== Endpoints

You can find lots of examples on the link:rest_examples.html[REST API examples page].

The complete list of available external commands can be found on the link:rest_commands.html[REST API commands page].

See examples and detailed description for all other available rest api urls:

=== GET /

lists all available rest urls.
alias for /index

=== GET /alerts

lists alerts based on logfiles.
alias for /logs?type[~]=^(HOST|SERVICE) ALERT

=== GET /checks/stats

lists host / service check statistics.

[options="header"]
|===========================================
|Attribute                         | Description
|hosts_active_15_perc              |
|hosts_active_15_sum               |
|hosts_active_1_perc               |
|hosts_active_1_sum                |
|hosts_active_5_perc               |
|hosts_active_5_sum                |
|hosts_active_60_perc              |
|hosts_active_60_sum               |
|hosts_active_all_perc             |
|hosts_active_all_sum              |
|hosts_active_state_change_avg     |
|hosts_active_state_change_max     |
|hosts_active_state_change_min     |
|hosts_active_state_change_sum     |
|hosts_active_sum                  |
|hosts_execution_time_avg          |
|hosts_execution_time_max          |
|hosts_execution_time_min          |
|hosts_execution_time_sum          |
|hosts_latency_avg                 |
|hosts_latency_max                 |
|hosts_latency_min                 |
|hosts_latency_sum                 |
|hosts_passive_15_perc             |
|hosts_passive_15_sum              |
|hosts_passive_1_perc              |
|hosts_passive_1_sum               |
|hosts_passive_5_perc              |
|hosts_passive_5_sum               |
|hosts_passive_60_perc             |
|hosts_passive_60_sum              |
|hosts_passive_all_perc            |
|hosts_passive_all_sum             |
|hosts_passive_state_change_avg    |
|hosts_passive_state_change_max    |
|hosts_passive_state_change_min    |
|hosts_passive_state_change_sum    |
|hosts_passive_sum                 |
|services_active_15_perc           |
|services_active_15_sum            |
|services_active_1_perc            |
|services_active_1_sum             |
|services_active_5_perc            |
|services_active_5_sum             |
|services_active_60_perc           |
|services_active_60_sum            |
|services_active_all_perc          |
|services_active_all_sum           |
|services_active_state_change_avg  |
|services_active_state_change_max  |
|services_active_state_change_min  |
|services_active_state_change_sum  |
|services_active_sum               |
|services_execution_time_avg       |
|services_execution_time_max       |
|services_execution_time_min       |
|services_execution_time_sum       |
|services_latency_avg              |
|services_latency_max              |
|services_latency_min              |
|services_latency_sum              |
|services_passive_15_perc          |
|services_passive_15_sum           |
|services_passive_1_perc           |
|services_passive_1_sum            |
|services_passive_5_perc           |
|services_passive_5_sum            |
|services_passive_60_perc          |
|services_passive_60_sum           |
|services_passive_all_perc         |
|services_passive_all_sum          |
|services_passive_state_change_avg |
|services_passive_state_change_max |
|services_passive_state_change_min |
|services_passive_state_change_sum |
|services_passive_sum              |
|===========================================


=== GET /commands

lists livestatus commands.
see https://www.naemon.org/documentation/usersguide/livestatus.html#commands for details.

=== GET /commands/<name>/config

Returns configuration for given command.
You will find available attributes here: http://www.naemon.org/documentation/usersguide/objectdefinitions.html#command

=== POST /commands/<name>/config

Replace command configuration completely, use PATCH to only update specific attributes.

=== PATCH /commands/<name>/config

Update command configuration partially.

=== DELETE /commands/<name>/config

Deletes given command from configuration.

=== GET /comments

lists livestatus comments.
see https://www.naemon.org/documentation/usersguide/livestatus.html#comments for details.

=== POST /config/check

Returns result from config check.

=== GET /config/diff

Returns differences between filesystem and stashed config changes.

[options="header"]
|===========================================
|Attribute                         | Description
|file                              |
|output                            |
|peer_key                          |
|===========================================


=== POST /config/discard

Reverts stashed configuration changes.
Alias for /config/revert

=== GET /config/files

returns all config files

[options="header"]
|===========================================
|Attribute                         | Description
|content                           |
|md5                               |
|mtime                             |
|path                              |
|peer_key                          |
|readonly                          |
|===========================================


=== GET /config/objects

Returns list of all objects.

[options="header"]
|===========================================
|Attribute                         | Description
|:FILE                             | filename and line number
|:ID                               | internal uniq id
|:PEER_KEY                         | id of remote site
|:READONLY                         | flag whether file is readonly
|:TYPE                             | object type, ex.: host
|===========================================


=== POST /config/objects

Create new object. Besides the actual object config, requires
2 special paramters :FILE and :TYPE.

=== POST /config/objects/<id>

Replace object configuration completely.

=== PATCH /config/objects/<id>

Update object configuration partially.

=== DELETE /config/objects/<id>

Remove given object from configuration.

=== POST /config/reload

Reloads configuration with the configured reload command.

=== POST /config/revert

Reverts stashed configuration changes.

=== POST /config/save

Saves stashed configuration changes to disk.

=== DELETE /contact/<name>/config

Deletes given contact from configuration.

=== GET /contactgroups

lists livestatus contactgroups.
see https://www.naemon.org/documentation/usersguide/livestatus.html#contactgroups for details.

=== GET /contactgroups/<name>/config

Returns configuration for given contactgroup.
You will find available attributes here: http://www.naemon.org/documentation/usersguide/objectdefinitions.html#contactgroup

=== POST /contactgroups/<name>/config

Replace contactgroup configuration completely, use PATCH to only update specific attributes.

=== PATCH /contactgroups/<name>/config

Update contactgroup configuration partially.

=== DELETE /contactgroups/<name>/config

Deletes given contactgroup from configuration.

=== GET /contacts

lists livestatus contacts.
see https://www.naemon.org/documentation/usersguide/livestatus.html#contacts for details.

=== GET /contacts/<name>/config

Returns configuration for given contact.
You will find available attributes here: http://www.naemon.org/documentation/usersguide/objectdefinitions.html#contact

=== POST /contacts/<name>/config

Replace contact configuration completely, use PATCH to only update specific attributes.

=== PATCH /contacts/<name>/config

Update contact configuration partially.

=== GET /downtimes

lists livestatus downtimes.
see https://www.naemon.org/documentation/usersguide/livestatus.html#downtimes for details.

=== GET /hostgroups

lists livestatus hostgroups.
see https://www.naemon.org/documentation/usersguide/livestatus.html#hostgroups for details.

=== GET /hostgroups/<name>/config

Returns configuration for given hostgroup.
You will find available attributes here: http://www.naemon.org/documentation/usersguide/objectdefinitions.html#hostgroup

=== POST /hostgroups/<name>/config

Replace hostgroups configuration completely, use PATCH to only update specific attributes.

=== PATCH /hostgroups/<name>/config

Update hostgroup configuration partially.

=== DELETE /hostgroups/<name>/config

Deletes given hostgroup from configuration.

=== GET /hosts

lists livestatus hosts.
see https://www.naemon.org/documentation/usersguide/livestatus.html#hosts for details.
there is an shortcut /hosts available.

=== GET /hosts/<name>

lists hosts for given name.
alias for /hosts?name=<name>

=== GET /hosts/<name>/alerts

lists alerts for given host.
alias for /logs?type[~]=^(HOST|SERVICE) ALERT&host_name=<name>

=== GET /hosts/<name>/config

Returns configuration for given host.
You will find available attributes here: http://www.naemon.org/documentation/usersguide/objectdefinitions.html#host

=== POST /hosts/<name>/config

Replace host configuration completely, use PATCH to only update specific attributes.

=== PATCH /hosts/<name>/config

Update host configuration partially.

=== DELETE /hosts/<name>/config

Deletes given host from configuration.

=== GET /hosts/<name>/notifications

lists notifications for given host.
alias for /logs?class=3&host_name=<name>

=== GET /hosts/<name>/services

lists services for given host.
alias for /services?host_name=<name>

=== GET /hosts/stats

hash of livestatus host statistics.

[options="header"]
|===========================================
|Attribute                         | Description
|active_checks_disabled_active     |
|active_checks_disabled_passive    |
|down                              |
|down_and_ack                      |
|down_and_disabled_active          |
|down_and_disabled_passive         |
|down_and_scheduled                |
|down_and_unhandled                |
|eventhandler_disabled             |
|flapping                          |
|flapping_disabled                 |
|notifications_disabled            |
|outages                           |
|passive_checks_disabled           |
|pending                           |
|pending_and_disabled              |
|pending_and_scheduled             |
|plain_down                        |
|plain_pending                     |
|plain_unreachable                 |
|plain_up                          |
|total                             |
|total_active                      |
|total_passive                     |
|unreachable                       |
|unreachable_and_ack               |
|unreachable_and_disabled_active   |
|unreachable_and_disabled_passive  |
|unreachable_and_scheduled         |
|unreachable_and_unhandled         |
|up                                |
|up_and_disabled_active            |
|up_and_disabled_passive           |
|up_and_scheduled                  |
|===========================================


=== GET /hosts/totals

hash of livestatus host totals statistics.
its basically a reduced set of /hosts/stats.

[options="header"]
|===========================================
|Attribute                         | Description
|down                              |
|down_and_unhandled                |
|pending                           |
|total                             |
|unreachable                       |
|unreachable_and_unhandled         |
|up                                |
|===========================================


=== GET /index

lists all available rest urls.

[options="header"]
|===========================================
|Attribute                         | Description
|description                       |
|protocol                          |
|url                               |
|===========================================


=== GET /lmd/sites

lists connected sites. Only available if LMD (`use_lmd`) is enabled.

[options="header"]
|===========================================
|Attribute                         | Description
|addr                              |
|bytes_received                    |
|bytes_send                        |
|idling                            |
|key                               |
|last_error                        |
|last_online                       |
|last_query                        |
|last_update                       |
|name                              |
|parent                            |
|peer_key                          |
|peer_name                         |
|queries                           |
|response_time                     |
|section                           |
|status                            |
|===========================================


=== GET /logs

lists livestatus logs.
see https://www.naemon.org/documentation/usersguide/livestatus.html#log for details.

=== GET /notifications

lists notifications based on logfiles.
alias for /logs?class=3

=== GET /processinfo

lists livestatus sites status.
see https://www.naemon.org/documentation/usersguide/livestatus.html#status for details.

=== GET /processinfo/stats

lists livestatus sites statistics.
see https://www.naemon.org/documentation/usersguide/livestatus.html#status for details.

=== GET /servicegroups

lists livestatus servicegroups.
see https://www.naemon.org/documentation/usersguide/livestatus.html#servicegroups for details.

=== GET /servicegroups/<name>/config

Returns configuration for given servicegroup.
You will find available attributes here: http://www.naemon.org/documentation/usersguide/objectdefinitions.html#servicegroup

=== POST /servicegroups/<name>/config

Replace servicegroup configuration completely, use PATCH to only update specific attributes.

=== PATCH /servicegroups/<name>/config

Update servicegroup configuration partially.

=== DELETE /servicegroups/<name>/config

Deletes given servicegroup from configuration.

=== GET /services

lists livestatus services.
see https://www.naemon.org/documentation/usersguide/livestatus.html#services for details.
there is an alias /services.

=== GET /services/<host_name>/<service>

lists services for given host and name.
alias for /services?host_name=<host_name>&description=<service>

=== GET /services/<host_name>/<service>/config

Returns configuration for given service.
You will find available attributes here: http://www.naemon.org/documentation/usersguide/objectdefinitions.html#service

=== POST /services/<host_name>/<service>/config

Replace service configuration completely, use PATCH to only update specific attributes.

=== PATCH /services/<host_name>/<service>/config

Update service configuration partially.

=== DELETE /services/<host_name>/<service>/config

Deletes given service from configuration.

=== GET /services/stats

livestatus service statistics.

[options="header"]
|===========================================
|Attribute                         | Description
|active_checks_disabled_active     |
|active_checks_disabled_passive    |
|critical                          |
|critical_and_ack                  |
|critical_and_disabled_active      |
|critical_and_disabled_passive     |
|critical_and_scheduled            |
|critical_and_unhandled            |
|critical_on_down_host             |
|eventhandler_disabled             |
|flapping                          |
|flapping_disabled                 |
|notifications_disabled            |
|ok                                |
|ok_and_disabled_active            |
|ok_and_disabled_passive           |
|ok_and_scheduled                  |
|passive_checks_disabled           |
|pending                           |
|pending_and_disabled              |
|pending_and_scheduled             |
|plain_critical                    |
|plain_ok                          |
|plain_pending                     |
|plain_unknown                     |
|plain_warning                     |
|total                             |
|total_active                      |
|total_passive                     |
|unknown                           |
|unknown_and_ack                   |
|unknown_and_disabled_active       |
|unknown_and_disabled_passive      |
|unknown_and_scheduled             |
|unknown_and_unhandled             |
|unknown_on_down_host              |
|warning                           |
|warning_and_ack                   |
|warning_and_disabled_active       |
|warning_and_disabled_passive      |
|warning_and_scheduled             |
|warning_and_unhandled             |
|warning_on_down_host              |
|===========================================


=== GET /services/totals

livestatus service totals statistics.
its basically a reduced set of /services/stats.

[options="header"]
|===========================================
|Attribute                         | Description
|critical                          |
|critical_and_unhandled            |
|ok                                |
|pending                           |
|total                             |
|unknown                           |
|unknown_and_unhandled             |
|warning                           |
|warning_and_unhandled             |
|===========================================


=== GET /thruk

hash of basic information about this thruk instance

[options="header"]
|===========================================
|Attribute                         | Description
|rest_version                      | rest api version
|thruk_version                     | thruk version
|thruk_branch                      | thruk branch name
|thruk_release_date                | thruk release date
|localtime                         | current server unix timestamp / epoch
|project_root                      | thruk root folder
|etc_path                          | configuration folder
|var_path                          | variable data folder
|===========================================


=== GET /thruk/bp

lists business processes.

[options="header"]
|===========================================
|Attribute                         | Description
|draft                             |
|file                              |
|id                                |
|last_check                        |
|last_state_change                 |
|name                              |
|state_type                        |
|status                            |
|status_text                       |
|template                          |
|time                              |
|===========================================


=== GET /thruk/bp/<nr>

business processes for given number.

[options="header"]
|===========================================
|Attribute                         | Description
|filter                            |
|id                                |
|last_check                        |
|last_state_change                 |
|name                              |
|nodes                             |
|rankDir                           |
|state_type                        |
|status                            |
|status_text                       |
|template                          |
|time                              |
|===========================================


=== GET /thruk/cluster

lists cluster nodes

[options="header"]
|===========================================
|Attribute                         | Description
|hostname                          |
|last_contact                      |
|last_error                        |
|last_update                       |
|node_id                           |
|node_url                          |
|pids                              |
|response_time                     |
|===========================================


=== GET /thruk/cluster/<id>

return cluster state for given node.

See `/thruk/cluster/` for the description of the attributes.

=== GET /thruk/cluster/heartbeat

send cluster heartbeat to all other nodes

=== GET /thruk/config

lists configuration information

=== GET /thruk/downtimes

lists recurring downtimes.

[options="header"]
|===========================================
|Attribute                         | Description
|backends                          |
|childoptions                      |
|comment                           |
|duration                          |
|file                              |
|fixed                             |
|flex_range                        |
|host                              |
|hostgroup                         |
|schedule                          |
|service                           |
|servicegroup                      |
|target                            |
|===========================================


=== GET /thruk/jobs

lists thruk jobs.

[options="header"]
|===========================================
|Attribute                         | Description
|cmd                               |
|end                               |
|forward                           |
|host_id                           |
|host_name                         |
|id                                |
|is_running                        |
|message                           |
|percent                           |
|pid                               |
|rc                                |
|remaining                         |
|start                             |
|stderr                            |
|stdout                            |
|time                              |
|user                              |
|===========================================


=== GET /thruk/jobs/<id>

get thruk job status for given id.
alias for /thruk/jobs?id=<id>

=== GET /thruk/panorama

lists panorama dashboards.

[options="header"]
|===========================================
|Attribute                         | Description
|name                              |
|nr                                |
|user                              |
|===========================================


=== GET /thruk/panorama/<nr>

panorama dashboards for given number.

[options="header"]
|===========================================
|Attribute                         | Description
|file                              |
|file_version                      |
|id                                |
|nr                                |
|objects                           |
|readonly                          |
|scripted                          |
|tab                               |
|tabpan-tab_1_panlet_1             |
|ts                                |
|user                              |
|===========================================


=== GET /thruk/reports

list of reports.

[options="header"]
|===========================================
|Attribute                         | Description
|backends                          |
|cc                                |
|desc                              |
|failed                            |
|is_public                         |
|name                              |
|nr                                |
|params                            |
|readonly                          |
|send_types                        |
|template                          |
|to                                |
|user                              |
|===========================================


=== POST /thruk/reports

create new report.

=== GET /thruk/reports/<nr>

report for given number.

[options="header"]
|===========================================
|Attribute                         | Description
|backends                          | list of selected backends.
|cc                                | carbon-copy for report email.
|desc                              | description.
|failed                            | failed flag.
|is_public                         | flag for public reports.
|name                              | name of the report.
|nr                                | primary id.
|params                            | report parameters.
|readonly                          | readonly flag.
|send_types                        | list of crontab entries.
|template                          | report template.
|to                                | email address the report email.
|user                              | owner of the report.
|===========================================


=== POST /thruk/reports/<nr>

update entire report for given number.

=== PATCH /thruk/reports/<nr>

update attributes for given number.

=== POST /thruk/reports/<nr>/generate

generate report for given number.

=== GET /thruk/reports/<nr>/report

return the actual report file in binary format.

=== GET /thruk/sessions

lists thruk sessions.

[options="header"]
|===========================================
|Attribute                         | Description
|active                            |
|address                           |
|id                                |
|user                              |
|===========================================


=== GET /thruk/sessions/<id>

get thruk sessions status for given id.
alias for /thruk/sessions?id=<id>

=== GET /timeperiods

lists livestatus timeperiods.
see https://www.naemon.org/documentation/usersguide/livestatus.html#timeperiods for details.

=== GET /timeperiods/<name>/config

Returns configuration for given timeperiod.
You will find available attributes here: http://www.naemon.org/documentation/usersguide/objectdefinitions.html#timeperiod

=== POST /timeperiods/<name>/config

Replace timeperiod configuration completely, use PATCH to only update specific attributes.

=== PATCH /timeperiods/<name>/config

Update timeperiods configuration partially.

=== DELETE /timeperiods/<name>/config

Deletes given timeperiod from configuration.

